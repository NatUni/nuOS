# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	bitcoinsv
#	bitcoinsv-daemon
#	bitcoinsv-utils
#	bitcoinsv-daemon/Makefile
#	bitcoinsv-daemon/pkg-message
#	bitcoinsv-utils/Makefile
#	bitcoinsv/Makefile
#	bitcoinsv/distinfo
#	bitcoinsv/files
#	bitcoinsv/files/bitcoinsv-qt.desktop
#	bitcoinsv/files/bitcoinsv.conf
#	bitcoinsv/files/bitcoinsvd.in
#	bitcoinsv/files/patch-src_bench_Examples.cpp
#	bitcoinsv/files/patch-src_net_fixed__len__multi__parser.cpp
#	bitcoinsv/files/patch-src_rpc_misc.cpp
#	bitcoinsv/files/patch-src_rpc_net.cpp
#	bitcoinsv/files/patch-src_util.cpp
#	bitcoinsv/files/patch-src_vmtouch.cpp
#	bitcoinsv/pkg-descr
#	bitcoinsv/pkg-message
#
echo c - bitcoinsv
mkdir -p bitcoinsv > /dev/null 2>&1
echo c - bitcoinsv-daemon
mkdir -p bitcoinsv-daemon > /dev/null 2>&1
echo c - bitcoinsv-utils
mkdir -p bitcoinsv-utils > /dev/null 2>&1
echo x - bitcoinsv-daemon/Makefile
sed 's/^X//' >bitcoinsv-daemon/Makefile << '1eae2b0c4234c457b7b86392254f919a'
XMASTERDIR=	${.CURDIR}/../bitcoinsv
XPKGNAMESUFFIX=	-daemon
X
XCOMMENT=	Virtual Peer-to-Peer Currency (Daemon)
X
XSLAVE_PORT=	yes
X
XOPTIONS_DEFINE=		DEBUG HARDENING TESTS UPNP WALLET ZMQ
XOPTIONS_DEFAULT=	HARDENING UPNP WALLET ZMQ
X
XUSERS=		bitcoinsv
XGROUPS=		bitcoinsv
X
XCONFIGURE_ARGS=	--with-daemon \
X		--without-gui \
X		--without-libs \
X		--without-qrencode \
X		--without-utils
X
XPLIST_FILES=	bin/bitcoinsvd \
X		man/man1/bitcoinsvd.1.gz \
X		"@sample %%ETCDIR%%.conf.sample"
X
XUSE_RC_SUBR=	bitcoinsvd
X
Xpost-install:
X	mv ${STAGEDIR}${PREFIX}/man/man1/bitcoind.1 ${STAGEDIR}${PREFIX}/man/man1/bitcoinsvd.1
X	mv ${STAGEDIR}${PREFIX}/bin/bitcoind ${STAGEDIR}${PREFIX}/bin/bitcoinsvd
X	${INSTALL_DATA} ${FILESDIR}/bitcoinsv.conf ${STAGEDIR}${PREFIX}/etc/bitcoinsv.conf.sample
X
X.include "${MASTERDIR}/Makefile"
1eae2b0c4234c457b7b86392254f919a
echo x - bitcoinsv-daemon/pkg-message
sed 's/^X//' >bitcoinsv-daemon/pkg-message << '460d6f20166fc3ddec6864f6dffd4a28'
X[
X{ type: install
X  message: <<EOM
XThis FreeBSD port normalizes the names of some executables and config
Xfiles to be consistent with and coexist with other bitcoin forks. When
XBitcoin SV discussion or documentation refers to bitcoin in particular 
Xcontexts, think bitcoinsv.
X
XWARNING: BitcoinSV requires fast random-access storage (SSD or NVMe) to
Xbe at all usable and will attempt to download and store well over 8 TB
Xof data upon starting as per default configuration. You've been warned. 
XEOM
X}
X]
460d6f20166fc3ddec6864f6dffd4a28
echo x - bitcoinsv-utils/Makefile
sed 's/^X//' >bitcoinsv-utils/Makefile << '3d0ae8f1507cd543079fc2e30a2465c3'
XMASTERDIR=	${.CURDIR}/../bitcoinsv
XPKGNAMESUFFIX=	-utils
X
XCOMMENT=	Virtual Peer-to-Peer Currency (CLI and Utilities)
XSLAVE_PORT=	yes
X
XOPTIONS_DEFINE=		DEBUG HARDENING TESTS
XOPTIONS_DEFAULT=	HARDENING TESTS
X
XCONFIGURE_ARGS=	--without-daemon \
X		--without-gui \
X		--without-libs \
X		--without-qrencode \
X		--without-miniupnpc \
X		--with-utils \
X		--disable-wallet
X
XPLIST_FILES=	bin/bitcoinsv-cli bin/bitcoinsv-tx bin/bitcoinsv-miner \
X		man/man1/bitcoinsv-cli.1.gz man/man1/bitcoinsv-tx.1.gz
X
Xpost-install:
X	mv ${STAGEDIR}${PREFIX}/man/man1/bitcoin-tx.1 ${STAGEDIR}${PREFIX}/man/man1/bitcoinsv-tx.1
X	mv ${STAGEDIR}${PREFIX}/man/man1/bitcoin-cli.1 ${STAGEDIR}${PREFIX}/man/man1/bitcoinsv-cli.1
X	mv ${STAGEDIR}${PREFIX}/bin/bitcoin-miner ${STAGEDIR}${PREFIX}/bin/bitcoinsv-miner
X	mv ${STAGEDIR}${PREFIX}/bin/bitcoin-tx ${STAGEDIR}${PREFIX}/bin/bitcoinsv-tx
X	mv ${STAGEDIR}${PREFIX}/bin/bitcoin-cli ${STAGEDIR}${PREFIX}/bin/bitcoinsv-cli
X	mv ${STAGEDIR}${PREFIX}/bin/bench_bitcoin ${STAGEDIR}${PREFIX}/bin/bench_bitcoinsv
X	mv ${STAGEDIR}${PREFIX}/bin/test_bitcoin ${STAGEDIR}${PREFIX}/bin/test_bitcoinsv
X
X.include "${MASTERDIR}/Makefile"
3d0ae8f1507cd543079fc2e30a2465c3
echo x - bitcoinsv/Makefile
sed 's/^X//' >bitcoinsv/Makefile << 'a4f67d83a66722d057c1933fd19a005a'
XPORTNAME=	bitcoinsv
XPORTVERSION=	1.0.16
XCATEGORIES=	net-p2p finance
XMASTER_SITES=	https://download.bitcoinsv.io/${PORTNAME}/${PORTVERSION}/
XDIST_SUBDIR=	${PORTNAME}
XDISTNAME=	bitcoin-sv-${DISTVERSIONFULL}
X
XMAINTAINER=	milios@ccsys.com
XCOMMENT?=	Virtual Peer-to-Peer Currency Client (QT)
XWWW=		https://bitcoinsv.com
X
XLICENSE=	MIT
X
XLIB_DEPENDS=	libboost_date_time.so:devel/boost-libs \
X		libevent.so:devel/libevent
X
XUSES=		autoreconf compiler:c++20-lang cpe gmake libtool pkgconfig qt:5 shebangfix
X
XGNU_CONFIGURE=	yes
X
XSLAVE_PORT?=	no
X
X.if defined(SLAVE_PORT) && ${SLAVE_PORT} == "no"
XBROKEN=		This BitcoinSV distribution does not offer a GUI app. These FreeBSD ports\
X		are simply lazy copypasta of loosely related softwares that do. See the\
X		bitcoinsv-daemon and bitcoinsv-utils slave ports
X
XUSES+=		desktop-file-utils
XUSE_QT=		core gui network widgets \
X		buildtools:build linguisttools:build qmake:build
X
XBUILD_DEPENDS+=	protoc:devel/protobuf
XLIB_DEPENDS+=	libprotobuf.so:devel/protobuf
X
XTESTS_USE=		QT=testlib
XTESTS_PLIST_FILES=	bin/test_bitcoinsv-qt \
X			bin/test_bitcoinsv
X.endif
X
XOPTIONS_DEFINE?=	DBUS DEBUG HARDENING QRCODES TESTS UPNP WALLET ZMQ
XOPTIONS_DEFAULT?=	DBUS HARDENING QRCODES UPNP WALLET ZMQ
XOPTIONS_SUB=		yes
X
XHARDENING_DESC=	Attempt to harden binaries (PIE for ASLR, NX Stack)
XQRCODES_DESC=	Display QR Codes
XTESTS_DESC=	Build test binary and unit tests
XWALLET_DESC=	Wallet Management Support
XZMQ_DESC=	Block and transaction broadcasting with ZeroMQ
X
XDBUS_CONFIGURE_WITH=	dbus
XDBUS_USE=		QT=dbus
X
XDEBUG_CONFIGURE_ENABLE=		debug
XDEBUG_INSTALL_TARGET_OFF=	install-strip
X
XHARDENING_CONFIGURE_ENABLE=	hardening
X
XTESTS_CONFIGURE_ENABLE=	tests bench
X.if defined(SLAVE_PORT) && ${SLAVE_PORT} == "yes"
XTESTS_PLIST_FILES=	bin/test_bitcoinsv
X.endif
XTESTS_PLIST_FILES+=	bin/bench_bitcoinsv
X
XUPNP_CONFIGURE_WITH=	miniupnpc
XUPNP_LIB_DEPENDS=	libminiupnpc.so:net/miniupnpc
XUPNP_CPPFLAGS=		-I${LOCALBASE}/include
XUPNP_LIBS=		-L${LOCALBASE}/lib
X
XQRCODES_CONFIGURE_WITH=	qrencode
XQRCODES_LIB_DEPENDS=	libqrencode.so:graphics/libqrencode
X
XWALLET_CONFIGURE_OFF=	--disable-wallet
XWALLET_CONFIGURE_ON=	--enable-wallet \
X			--with-incompatible-bdb \
X			--with-sqlite=yes \
X			BDB_CFLAGS=-I${BDB_INCLUDE_DIR} \
X			BDB_LIBS="-L${BDB_LIB_DIR} \
X				-Wl,-rpath=${BDB_LIB_DIR} \
X				-l${BDB_LIB_CXX_NAME}"
XWALLET_USES=		bdb:5+ sqlite:3
X
XZMQ_CONFIGURE_ENABLE=	zmq
XZMQ_BUILD_DEPENDS=	libzmq4>0:net/libzmq4
XZMQ_RUN_DEPENDS=	libzmq4>0:net/libzmq4
X
XCONFIGURE_ARGS?=	--without-libs \
X			--with-gui=qt5 \
X			--without-daemon \
X			--without-utils
X
XCONFIGURE_ENV=	OBJCXX="${CXX}" OBJCXXFLAGS="${CXXFLAGS}"
XMAKE_ENV+=	V=1
X
XPLIST_FILES?=	bin/bitcoinsv-qt man/man1/bitcoinsv-qt.1.gz \
X		share/applications/bitcoinsv-qt.desktop
X
X.include <bsd.port.pre.mk>
X
X.if defined(SLAVE_PORT) && ${SLAVE_PORT} == "no"
X
Xpost-install:
X	${INSTALL} ${FILESDIR}/bitcoinsv-qt.desktop \
X		${STAGEDIR}${PREFIX}/share/applications
X
X.endif
X
Xregression-test: build
X	# To use this sucessfully, remove --without-daemon and --without-utils
X	# from CONFIGURE_ARGS above.
X
X	@cd ${WRKSRC} && ${GMAKE} check
X
X.include <bsd.port.post.mk>
a4f67d83a66722d057c1933fd19a005a
echo x - bitcoinsv/distinfo
sed 's/^X//' >bitcoinsv/distinfo << 'b5eddfabd7ade873f1e35c68ea6be47f'
XTIMESTAMP = 1704177086
XSHA256 (bitcoinsv/bitcoin-sv-1.0.16.tar.gz) = f400ae2895d48d588520462b496795046ce2ded0f3628ae8a414729b45a75fe0
XSIZE (bitcoinsv/bitcoin-sv-1.0.16.tar.gz) = 7792222
b5eddfabd7ade873f1e35c68ea6be47f
echo c - bitcoinsv/files
mkdir -p bitcoinsv/files > /dev/null 2>&1
echo x - bitcoinsv/files/bitcoinsv-qt.desktop
sed 's/^X//' >bitcoinsv/files/bitcoinsv-qt.desktop << '707082f54a5b1b5ed4e153b32a34c878'
X[Desktop Entry]
XVersion=1.0
XName=Bitcoin SV
XComment=Connect to the Bitcoin SV P2P Network
XComment[de]=Verbinde mit dem Bitcoin SV peer-to-peer Netzwerk
XComment[fr]=Bitcoin SV, monnaie virtuelle cryptographique pair à pair
XComment[tr]=Bitcoin SV, eşten eşe kriptografik sanal para birimi
XExec=bitcoinsv-qt %u
XTerminal=false
XType=Application
XIcon=bitcoin128
XMimeType=x-scheme-handler/bitcoinsv;
XCategories=Office;Finance;
XStartupWMClass=BitcoinSV-qt
707082f54a5b1b5ed4e153b32a34c878
echo x - bitcoinsv/files/bitcoinsv.conf
sed 's/^X//' >bitcoinsv/files/bitcoinsv.conf << '2b855a2c5ee2367e1befd66f7e0e5a8d'
X# FreeBSD bitcoinsvd configuration file
X
X# This file is used by bitcoinsvd
X# The GUI and CLI will default to generating and using ~/.bitcoinsv/bitcoinsv.conf
X#
X# BitcoinSV has hundreds of config options and there isn't a single mode of
X# operation (mining, client, testnet etc)  that can be easily covered by a
X# sample file.
X
X# Bind to given address and always listen on it. Use [host]:port notation for IPv6
X#bind=<addr>
X
X# Specify your own public IP address.
X#externalip=<ip>
X
X# Listen for incoming connections on non-default port.
X#port=<port>
X
X# Connect via a SOCKS5 proxy
X#proxy=127.0.0.1:9050
X
X# Setting minminingfee is mandatory even if you never intend to mine any BSV. The
X# setting below is a sensible default chosen by the FreeBSD port maintainer per
X# recommendation in the source distribution version 1.0.11 release notes. If you
X# intend to mine BSV you should inform yourself as to your decided setting value.
Xminminingtxfee=0.000005
X
X# The source distribution includes a checkpoint of block #532487. To speed up the
X# IBD (initial block download) and/or tax your system less during the loading of
X# historical blocks, the FreeBSD port maintainer has here included for you the
X# hash of block #825115 (2024-01-01 00:07:28 UTC).
Xassumevalid=00000000000000000445c21a11e6efe5f391c5a4a29a959c19f0dee0dd8f8919
X
X# Delete oldest blocks from local storage as block storage approaches this many
X# megabytes. As of January 1, 2024 the entire BSV blockchain exceeds 8 terabytes.
X# Default is to accumulate all blocks. Pruning is incompatible with txindex mode.
X#prune=500000
X
X# Maintain an index of all global transactions. Incompatible with block pruning.
X# Default is to only index transactions involving your own wallet.
X#txindex=1
X
X# Disable connecting to peer nodes over the network. This can be useful if, for 
X# instance, you first want to import private keys before beginning the initial
X# block download, since pruning would preclude a rescan of the local database.
X#noconnect=1
X
X# Disable the "safe" mode which prevents one from spending coins while the local
X# database is behind the network of up-to-date peers. This can be useful when it
X# is already known to the user at what addresses and in what blocks all of their
X# unspent transaction outputs are, such as when liquidating all BSV held from
X# prior to the hard fork(s) from ancestor blockchain(s) by using imported keys.
X# Once the entirety of coin is detected by the node, a valid transaction can be
X# broadcast despite having an incomplete database of blocks. Thus, one can avoid
X# drudging through the laughable self-pwn that is the explosion of spam, attack
X# and other tiny transactions BSV invited unto itself, apparently to solidify
X# the very sort of centralization its disingenuous proponents claim to denounce.
X# If using this method of operation, be sure to completely spend any such UTXOs
X# because you will not be able to access any remainder returned to you by the
X# transaction to a change address until after you make your way through all the
X# blocks mined before your transaction was sent, terabytes of data which "peer"
X# nodes are hesitant and sluggish to share with your node without an out-of-
X# band commercial agreement made with one or more of the few in-crowd cronies.
X#disablesafemode=1
X
X# Fee (in BSV/kB) to add to transactions you send; (default: 0). This is easily
X# set at runtime as needed on the basis of individual transactions but it might
X# be helpful to initialize to a sensible value to avoid accidentally sending
X# slow or stagnant transactions after a fresh (re)start.
X#paytxfee=0.00001
X
X# The maxstackmemoryusageconsensus and excessiveblocksize settings are critical
X# settings central to BitcoinSV's entire purported reason for being. Settings
X# below are informed as of January 1, 2024 to the FreeBSD port maintainer by the
X# monopolizing organizations of Craig Wright and Richard Baker. You should make
X# an informed decision based on your use case for BSV. These are workable...
X
X# ...for BSV miners as of 2024-01-01:
X#maxstackmemoryusageconsensus=100000000
X#excessiveblocksize=4000000000
X
X# ...for BSV listeners/wallets as of 2024-01-01:
X#maxstackmemoryusageconsensus=200000000
X#excessiveblocksize=10000000000
2b855a2c5ee2367e1befd66f7e0e5a8d
echo x - bitcoinsv/files/bitcoinsvd.in
sed 's/^X//' >bitcoinsv/files/bitcoinsvd.in << 'b0c3cea8f92f77b19547e728311f7037'
X#!/bin/sh
X
X# PROVIDE: bitcoinsvd
X# REQUIRE: LOGIN cleanvar
X# KEYWORD: shutdown
X
X#
X# Add the following lines to /etc/rc.conf to enable :
X# bitcoinsvd_enable (bool):	Set to "NO" by default.
X#				Set it to "YES" to enable bitcoinsvd
X# bitcoinsvd_user (str)		Set to "bitcoinsv" by default.
X# bitcoinsvd_group (str)		Set to "bitcoinsv" by default.
X# bitcoinsvd_conf (str)		Set to "%%PREFIX%%/etc/bitcoinsvd.conf" by default.
X# bitcoinsvd_data_dir (str)	Set to "/var/db/bitcoinsv" by default.
X# bitcoinsvdlimits_enable (bool)	Set to "NO" by default.
X#				Set it to "YES" to enable bitcoinsvdlimits
X# bitcoinsvdlimits_args		Set to "-e -U ${bitcoinsvd_user}" by default
X
X
X. /etc/rc.subr
X
Xname="bitcoinsvd"
Xrcvar=bitcoinsvd_enable
X
Xstart_precmd="bitcoinsvd_precmd"
Xstart_cmd="bitcoinsvd_start"
Xrestart_precmd="bitcoinsvd_checkconfig"
Xreload_precmd="bitcoinsvd_checkconfig"
Xconfigtest_cmd="bitcoinsvd_checkconfig"
Xstatus_cmd="bitcoinsvd_status"
Xstop_cmd="bitcoinsvd_stop"
Xstop_postcmd="bitcoinsvd_wait"
Xcommand="%%PREFIX%%/bin/bitcoinsvd"
Xdaemon_command="/usr/sbin/daemon"
Xpidfile="/var/run/${name}.pid"
Xextra_commands="configtest"
X
X
X: ${bitcoinsvd_enable:="NO"}
X: ${bitcoinsvdlimits_enable:="NO"}
X
Xload_rc_config ${name}
X
X: ${bitcoinsvd_user:="bitcoinsv"}
X: ${bitcoinsvd_group:="bitcoinsv"}
X: ${bitcoinsvd_data_dir:="/var/db/bitcoinsv"}
X: ${bitcoinsvd_config_file:="%%PREFIX%%/etc/bitcoinsv.conf"}
X: ${bitcoinsvdlimits_args:="-e -U ${bitcoinsvd_user}"}
X
X# set up dependant variables
Xprocname="${command}"
Xrequired_files="${bitcoinsvd_config_file}"
X
X
Xbitcoinsvd_checkconfig()
X{
X  echo "Performing sanity check on bitcoinsvd configuration:"
X  if [ ! -d "${bitcoinsvd_data_dir}" ]
X  then
X    echo "Missing data directory: ${bitcoinsvd_data_dir}"
X    exit 1
X  fi
X  chown -R "${bitcoinsvd_user}:${bitcoinsvd_group}" "${bitcoinsvd_data_dir}"
X
X  if [ ! -f "${bitcoinsvd_config_file}" ]
X  then
X    echo "Missing configuration file: ${bitcoinsvd_config_file}"
X    exit 1
X  fi
X  if [ ! -x "${command}" ]
X  then
X    echo "Missing executable: ${command}"
X    exit 1
X  fi
X  return 0
X}
X
Xbitcoinsvd_cleanup()
X{
X  rm -f "${pidfile}"
X}
X
Xbitcoinsvd_precmd()
X{
X  bitcoinsvd_checkconfig
X
X  pid=$(check_pidfile "${pidfile}" "${procname}")
X  if [ -z "${pid}" ]
X  then
X    echo "Bitcoinsvd is not running"
X    rm -f "${pidfile}"
X  fi
X
X  if checkyesno bitcoinsvdlimits_enable
X  then
X    eval $(/usr/bin/limits ${bitcoinsvdlimits_args}) 2>/dev/null
X  else
X    return 0
X  fi
X}
X
Xbitcoinsvd_status()
X{
X  local pid
X  pid=$(check_pidfile "${pidfile}" "${procname}")
X  if [ -z "${pid}" ]
X  then
X    echo "Bitcoinsvd is not running"
X    return 1
X  else
X    echo "Bitcoinsvd running, pid: ${pid}"
X  fi
X}
X
Xbitcoinsvd_start()
X{
X  echo "Starting bitcoinsvd:"
X  cd "${bitcoinsvd_data_dir}" || return 1
X  ${daemon_command} -u "${bitcoinsvd_user}" -p "${pidfile}" -f \
X    ${command} \
X    -conf="${bitcoinsvd_config_file}" \
X    -datadir="${bitcoinsvd_data_dir}"
X}
X
Xbitcoinsvd_stop()
X{
X  echo "Stopping bitcoinsvd:"
X  pid=$(check_pidfile "${pidfile}" "${procname}")
X  if [ -z "${pid}" ]
X  then
X    echo "Bitcoinsvd is not running"
X    return 1
X  else
X    kill ${pid}
X  fi
X}
X
Xbitcoinsvd_wait()
X{
X  local n=60
X  echo "Waiting for bitcoinsvd shutdown:"
X  while :
X  do
X    printf '.'
X    pid=$(check_pidfile "${pidfile}" "${procname}")
X    if [ -z "${pid}" ]
X    then
X      printf '\n'
X      break
X    fi
X    sleep 1
X    n=$((${n} - 1))
X    if [ ${n} -eq 0 -a -f "${pidfile}" ]
X    then
X      printf "\nForce shutdown"
X      kill -9 $(cat "${pidfile}")
X      for n in 1 2 3
X      do
X        printf '.'
X        sleep 1
X      done
X      printf '\n'
X      break
X    fi
X  done
X  rm -f "${pidfile}"
X  echo "Shutdown complete"
X}
X
Xrun_rc_command "$1"
b0c3cea8f92f77b19547e728311f7037
echo x - bitcoinsv/files/patch-src_bench_Examples.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_bench_Examples.cpp << '95f8174bc17c301d121be8182aa910e3'
X--- src/bench/Examples.cpp.orig	2024-01-02 14:03:14.064806000 +0000
X+++ src/bench/Examples.cpp	2024-01-02 14:03:35.231687000 +0000
X@@ -25,7 +25,7 @@
X     std::atomic<double> sum {0.0};  // atomic so not optimised away
X     double d = 0.01;
X     while (state.KeepRunning()) {
X-        sum += sin(d);
X+        sum = sum + sin(d);
X         d += 0.000001;
X     }
X }
95f8174bc17c301d121be8182aa910e3
echo x - bitcoinsv/files/patch-src_net_fixed__len__multi__parser.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_net_fixed__len__multi__parser.cpp << '51b3d851d9a533ea1626b1092485e0f0'
X--- src/net/fixed_len_multi_parser.cpp.orig	2024-01-02 07:12:49.846523000 +0000
X+++ src/net/fixed_len_multi_parser.cpp	2024-01-02 07:13:19.198017000 +0000
X@@ -14,6 +14,7 @@
X #include <thread>
X #include <unistd.h>
X #include <utility>
X+#include <fstream>
X 
X #include "cmpct_size.h"
X #include "msg_parser.h"
51b3d851d9a533ea1626b1092485e0f0
echo x - bitcoinsv/files/patch-src_rpc_misc.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_rpc_misc.cpp << '5305e58c501dae7496fd546dbdcedc9a'
X--- src/rpc/misc.cpp.orig	2024-01-02 09:20:43.936583000 +0000
X+++ src/rpc/misc.cpp	2024-01-02 09:22:46.225744000 +0000
X@@ -1229,10 +1229,10 @@
X     obj.push_back(Pair("acceptnonstdoutputs", config.GetAcceptNonStandardOutput(true)));
X     obj.push_back(Pair("datacarrier", config.GetDataCarrier()));
X     obj.push_back(Pair("minminingtxfee", ValueFromAmount(mempool.GetBlockMinTxFee().GetFeePerK())));
X-    obj.push_back(Pair("maxstdtxvalidationduration", config.GetMaxStdTxnValidationDuration().count()));
X-    obj.push_back(Pair("maxnonstdtxvalidationduration", config.GetMaxNonStdTxnValidationDuration().count()));
X+    obj.push_back(Pair("maxstdtxvalidationduration", static_cast<uint64_t>(config.GetMaxStdTxnValidationDuration().count())));
X+    obj.push_back(Pair("maxnonstdtxvalidationduration", static_cast<uint64_t>(config.GetMaxNonStdTxnValidationDuration().count())));
X 
X-    obj.push_back(Pair("maxtxchainvalidationbudget", config.GetMaxTxnChainValidationBudget().count()));
X+    obj.push_back(Pair("maxtxchainvalidationbudget", static_cast<uint64_t>(config.GetMaxTxnChainValidationBudget().count())));
X     obj.push_back(Pair("validationclockcpu", config.GetValidationClockCPU()));
X 
X 
5305e58c501dae7496fd546dbdcedc9a
echo x - bitcoinsv/files/patch-src_rpc_net.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_rpc_net.cpp << '6c563b98144d72227aafacac074d9c07'
X--- src/rpc/net.cpp.orig	2024-01-02 09:46:21.884165000 +0000
X+++ src/rpc/net.cpp	2024-01-02 09:48:51.146312000 +0000
X@@ -619,7 +619,7 @@
X     obj.push_back(Pair("localrelay", fRelayTxes));
X     obj.push_back(Pair("timeoffset", GetTimeOffset()));
X     if (g_connman) {
X-        obj.push_back(Pair("txnpropagationfreq", g_connman->getTransactionPropagator()->getRunFrequency().count()));
X+        obj.push_back(Pair("txnpropagationfreq", static_cast<uint64_t>(g_connman->getTransactionPropagator()->getRunFrequency().count())));
X         obj.push_back(Pair("txnpropagationqlen", static_cast<uint64_t>(g_connman->getTransactionPropagator()->getNewTxnQueueLength())));
X         obj.push_back(Pair("networkactive", g_connman->GetNetworkActive()));
X         obj.push_back(Pair("connections", (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));
X@@ -841,7 +841,7 @@
X     std::chrono::milliseconds freq { request.params[0].get_int() };
X     g_connman->getTransactionPropagator()->setRunFrequency(freq);
X 
X-    return g_connman->getTransactionPropagator()->getRunFrequency().count();
X+    return static_cast<uint64_t>(g_connman->getTransactionPropagator()->getRunFrequency().count());
X }
X 
X static UniValue getauthconninfo(const Config &config,
6c563b98144d72227aafacac074d9c07
echo x - bitcoinsv/files/patch-src_util.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_util.cpp << 'ff4a1d2633b01fcc386f1fa55ad2a033'
X--- src/util.cpp.orig	2024-01-02 12:56:18.342421000 +0000
X+++ src/util.cpp	2024-01-02 12:57:57.219052000 +0000
X@@ -84,7 +84,7 @@
X // Application startup time (used for uptime calculation)
X const int64_t nStartupTime = GetTime();
X 
X-const char *const BITCOIN_CONF_FILENAME = "bitcoin.conf";
X+const char *const BITCOIN_CONF_FILENAME = "bitcoinsv.conf";
X const char *const BITCOIN_PID_FILENAME = "bitcoind.pid";
X 
X ArgsManager gArgs;
X@@ -481,7 +481,7 @@
X     return pathRet / "Library/Application Support/Bitcoin";
X #else
X     // Unix
X-    return pathRet / ".bitcoin";
X+    return pathRet / ".bitcoinsv";
X #endif
X #endif
X }
ff4a1d2633b01fcc386f1fa55ad2a033
echo x - bitcoinsv/files/patch-src_vmtouch.cpp
sed 's/^X//' >bitcoinsv/files/patch-src_vmtouch.cpp << '0c283f8a3c1dcb934e2b3aafdfba5563'
X--- src/vmtouch.cpp.orig	2024-01-02 12:03:43.989401000 +0000
X+++ src/vmtouch.cpp	2024-01-02 12:06:23.048503000 +0000
X@@ -298,11 +298,7 @@
X   #endif
X     } else {
X       //double last_chart_print_time=0.0, temp_time;
X-      #ifdef __APPLE__
X           std::vector<char> mincore_array(pages_in_range);
X-      #else
X-          std::vector<unsigned char> mincore_array(pages_in_range);
X-      #endif
X       
X       // 3rd arg to mincore is char* on BSD and unsigned char* on linux      
X       if (mincore(mem, len_of_range, mincore_array.data()) != 0) {
0c283f8a3c1dcb934e2b3aafdfba5563
echo x - bitcoinsv/pkg-descr
sed 's/^X//' >bitcoinsv/pkg-descr << 'afed6ce53477e74a97aa72bb9376c375'
XBitcoin SV (Satoshi Vision) is a fork of the Bitcoin Cash
Xproject made by a ridiculous fraud named Craig Wright. The
Xtransaction history is shared with Bitcoin Cash through
Xblock #556766 (therefore shared with Bitcoin through block
X#478558).
X
XNote: as of Jan 1, 2024 the BSV blockchain requires more
Xthan 8 terabytes of fast random access (SSD or NVMe) space
Xavailable in /var/db/bitcoinsv or ~/.bitcoinsv (depending
Xon whether you choose to run the headless daemon or the
Xstandalone wallet GUI). However, if all you wish to do is
Xliquidate your BSV that came from prefork BTC (and/or BCH)
Xholdings, this can be done with less than 500 GB. (See the
Xdisablesafemode configuration option.)
afed6ce53477e74a97aa72bb9376c375
echo x - bitcoinsv/pkg-message
sed 's/^X//' >bitcoinsv/pkg-message << '6771aa348cd4c87cb5cd0190789601cb'
X[
X{ type: install
X  message: <<EOM
XThis FreeBSD port normalizes the names of some executables and config
Xfiles to be consistent with and coexist with other bitcoin forks. When
XBitcoin SV discussion or documentation refers to bitcoin in particular 
Xcontexts, think bitcoinsv.
X
XWARNING: BitcoinSV requires fast random-access storage (SSD or NVMe) to
Xbe at all usable and will attempt to download and store well over 8 TB
Xof data upon starting as per default configuration. You've been warned. 
XEOM
X}
X]
6771aa348cd4c87cb5cd0190789601cb
exit

