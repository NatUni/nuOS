--- ../cassandra4.orig/files/patch-src_java_org_apache_cassandra_utils_FastByteOperations.java	2023-03-26 22:51:26.979728000 +0000
+++ ./files/patch-src_java_org_apache_cassandra_utils_FastByteOperations.java	2023-03-26 23:38:03.321649000 +0000
@@ -1,6 +1,6 @@
---- src/java/org/apache/cassandra/utils/FastByteOperations.java.orig	2020-03-30 16:37:37 UTC
+--- src/java/org/apache/cassandra/utils/FastByteOperations.java.orig	2020-12-18 17:35:13 UTC
 +++ src/java/org/apache/cassandra/utils/FastByteOperations.java
-@@ -191,6 +191,20 @@ public class FastByteOperations
+@@ -205,6 +205,20 @@ public class FastByteOperations
  
          static final boolean BIG_ENDIAN = ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);
  
@@ -21,7 +21,7 @@
          public int compare(byte[] buffer1, int offset1, int length1, byte[] buffer2, int offset2, int length2)
          {
              return compareTo(buffer1, BYTE_ARRAY_BASE_OFFSET + offset1, length1,
-@@ -214,7 +228,7 @@ public class FastByteOperations
+@@ -228,7 +242,7 @@ public class FastByteOperations
              else
              {
                  obj1 = null;
@@ -30,7 +30,7 @@
              }
  
              return compareTo(obj1, offset1, length1, buffer2, BYTE_ARRAY_BASE_OFFSET + offset2, length2);
-@@ -230,7 +244,7 @@ public class FastByteOperations
+@@ -249,7 +263,7 @@ public class FastByteOperations
              if (src.hasArray())
                  System.arraycopy(src.array(), src.arrayOffset() + srcPosition, trg, trgPosition, length);
              else
@@ -38,8 +38,8 @@
 +                copy(null, srcPosition + unsafeGetLong(src, DIRECT_BUFFER_ADDRESS_OFFSET), trg, trgPosition, length);
          }
  
-         public void copy(ByteBuffer srcBuf, int srcPosition, ByteBuffer trgBuf, int trgPosition, int length)
-@@ -245,7 +259,7 @@ public class FastByteOperations
+         public void copy(byte[] src, int srcPosition, ByteBuffer trg, int trgPosition, int length)
+@@ -272,7 +286,7 @@ public class FastByteOperations
              else
              {
                  src = null;
@@ -48,7 +48,7 @@
              }
              copy(src, srcOffset + srcPosition, trgBuf, trgPosition, length);
          }
-@@ -255,7 +269,7 @@ public class FastByteOperations
+@@ -282,7 +296,7 @@ public class FastByteOperations
              if (trgBuf.hasArray())
                  copy(src, srcOffset, trgBuf.array(), trgBuf.arrayOffset() + trgPosition, length);
              else
@@ -57,7 +57,7 @@
          }
  
          public static void copy(Object src, long srcOffset, byte[] trg, int trgPosition, int length)
-@@ -263,7 +277,7 @@ public class FastByteOperations
+@@ -290,7 +304,7 @@ public class FastByteOperations
              if (length <= MIN_COPY_THRESHOLD)
              {
                  for (int i = 0 ; i < length ; i++)
@@ -66,7 +66,7 @@
              }
              else
              {
-@@ -302,7 +316,7 @@ public class FastByteOperations
+@@ -329,7 +343,7 @@ public class FastByteOperations
              else
              {
                  obj1 = null;
@@ -75,7 +75,7 @@
              }
              offset1 += buffer1.position();
              length1 = buffer1.remaining();
-@@ -325,7 +339,7 @@ public class FastByteOperations
+@@ -352,7 +366,7 @@ public class FastByteOperations
              else
              {
                  obj2 = null;
@@ -84,7 +84,7 @@
              }
              int length2 = limit - position;
              offset2 += position;
-@@ -358,8 +372,8 @@ public class FastByteOperations
+@@ -385,8 +399,8 @@ public class FastByteOperations
              int wordComparisons = minLength & ~7;
              for (int i = 0; i < wordComparisons ; i += Longs.BYTES)
              {
@@ -95,7 +95,7 @@
  
                  if (lw != rw)
                  {
-@@ -372,8 +386,8 @@ public class FastByteOperations
+@@ -399,8 +413,8 @@ public class FastByteOperations
  
              for (int i = wordComparisons ; i < minLength ; i++)
              {
