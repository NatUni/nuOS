#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.99a0 - bin/nu_sys
#
# Copyright (c) 2008-2022 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.99a0
. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts a:b:c:Deh:kK:l:p:qs:u:vx OPT; do case $OPT in
	a) ADMIN_ACCT=$OPTARG;;
	b) BD_ACCT=$OPTARG;;
	c) PKG_COLLECTION=$OPTARG;;
	D)	if [ -n "${OPT_DEBUG-}" ]; then
			COPY_PORTS=y
			COPY_DEV_PKGS=y
			COPY_SRC=y
			COPY_SVN=y
		fi
		OPT_DEBUG=y;;
	e) OPT_ELI_SWAP=y;;
	h) NEW_HOST=$OPTARG;;
	k) OPT_INSTALL_ADMIN_KEYS=y;;
	K) push ALSO_INSTALL_KEYS $OPTARG;;
	l) eval LOCAL_SCRIPT_${ARGi_l:=0}=\$OPTARG; ARGi_l=$(($ARGi_l+1));;
	p) POOL_NAME=$OPTARG;;
	q) OPT_QUICK=y;;
	s) SWAP_SIZE=$OPTARG;;
	u) USER_ACCT=$OPTARG;;
	v) OPT_VERBOSE=y;;
	x) ADMIN_ACCT=; BD_ACCT=; USER_ACCT=; ADMIN_PASS=; BD_PASS=; USER_PASS=;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

SWAP_SIZE=`humanize $(dehumanize "${SWAP_SIZE:-0}") | tr -d ' B'`

load_lib nu_admin nu_make nu_ports nu_collection nu_install

baseos_init
nuos_init
make_vars_init
collection_vars_init
install_vars_init
admin_init

maybe_pause
maybe_yell

discover_install_mnt $POOL_NAME

sys_ds=$POOL_NAME/sys
factories_ds=$sys_ds/factory
nuos_factory_ds=$sys_ds/factory/nuOS-$NUOS_VER-$TRGT
use_factory_ds=$nuos_factory_ds/`zfs get -H -o value org.nuos:active_revision $nuos_factory_ds`

host_ds=$sys_ds/$NEW_HOST
curr_host_ver=`zfs get -H -o value org.nuos:active_revision $host_ds || true`
[ "x$curr_host_ver" != x- ] || curr_host_ver=

if ! zfs create -o mountpoint=none -o canmount=off $host_ds; then
	host_existed=y
	existing_host_ds=$host_ds/`zfs get -H -o value org.nuos:active_revision $host_ds`
	if [ -z "$ALT_MNT" ] && [ yes = `zfs get -H -o value mounted $existing_host_ds` ]; then
		existing_host_mp="`zfs get -H -o value mountpoint $existing_host_ds`"
		if [ "$existing_host_mp" = "$POOL_MNT" ]; then
			zfs set canmount=noauto $existing_host_ds
			awk_pattern="$(echo "$POOL_MNT/" | sed -e 's,/,\\/,g;s/\./\\\./g')"
			mount | awk "\$3 ~ /^$awk_pattern/ {print \$3}" | tail -r | xargs -n1 umount
			zfs unmount $existing_host_ds
		fi
	fi
fi

new_host_rev=0
while
	new_host_ds=$host_ds/v$new_host_rev
	zfs list $new_host_ds
do
	new_host_rev=$(($new_host_rev + 1))
done

cloner $use_factory_ds@pool_registered $new_host_ds

require_tmp new_fstab

if [ 0 != "$SWAP_SIZE" -o -n "${TMP_SIZE-}" -o -n "${RUN_SIZE-}" ]; then
	swap_bytes=`dehumanize $SWAP_SIZE`
	: ${TMP_SIZE:=`humanize $(($swap_bytes / 2)) | tr -d ' B' | tr [[:upper:]] [[:lower:]]`}
	: ${RUN_SIZE:=`humanize $(($swap_bytes / 8)) | tr -d ' B' | tr [[:upper:]] [[:lower:]]`}
	
	awk "
		\$3 == \"tmpfs\" {
			if (\$2 ~ /\/tmp\$/) {
				s=\"$TMP_SIZE\"
			} else if (\$2 ~ /\/run\$/) {
				s=\"$RUN_SIZE\"
			} else {
				s=\"\"
			}
			if (s) {
				sub(/(^|,)size=[^,]+/, \"size=\"s, \$4)
			}
		}
		{print \$0}
	"
else
	cat
fi < $POOL_MNT/etc/fstab >| "$new_fstab"

cat >> "$new_fstab" <<EOF
/dev/gpt/esp0-$POOL_NAME /boot/efi msdosfs ro,failok 2 0
EOF

if [ 0 != "$SWAP_SIZE" ]; then
	if [ -n "${OPT_ELI_SWAP-}" ]; then
		cat >> "$new_fstab" <<EOF
/dev/zvol/$POOL_NAME/swap/sw0.eli none swap sw,ealgo=AES-XTS,keylen=256,sectorsize=4096 0 0
EOF
	fi
	zfs set org.nuos:swap_space=${OPT_ELI_SWAP:+eli:}$SWAP_SIZE $new_host_ds
fi

cat "$new_fstab" >| $POOL_MNT/etc/fstab
retire_tmp new_fstab

cat >> $POOL_MNT/etc/rc.conf.local <<EOF
hostname="$NEW_HOST"
EOF

sed -i '' -e "s/\.my\.domain\$/.${NEW_HOST#*.} $NEW_HOST ${NEW_HOST%%.*}/;s/\<warden.myname.my.domain\>/warden.$NEW_HOST/" $POOL_MNT/etc/hosts

cat >> $POOL_MNT/etc/nuos/backup <<EOF
sys/$NEW_HOST/(org.nuos:active_revision)/etc
sys/$NEW_HOST/(org.nuos:active_revision)/var
EOF

export NEW_HOST

bl_rev=0
while
	bl_jail_name=base-lab$bl_rev
	zfs list $POOL_NAME/jail/$bl_jail_name.$NEW_HOST
do
	bl_rev=$(($bl_rev + 1))
done
sister nu_jail ${OPT_VERBOSE:+-v} -C $POOL_MNT -p $POOL_NAME -t clone -w -j $bl_jail_name -o $BASEOS_TYPE/$BASEOS_VER/$TRGT -s pkg_ready -i 127.1.255.254 -x -q

copy_ds=`CHROOTDIR=$POOL_MNT; nuos_init -q; echo $POOL_NAME/os/$HOSTOS_TYPE/$HOSTOS_VER/$HOSTOS_TRGT`

nuos_rev=`zfs get -H -o value org.nuos:active_revision $copy_ds || true`
[ "x$nuos_rev" != x- ] || nuos_rev=
if [ "$PKG_COLLECTION" != pkg -a "$PKG_COLLECTION" != blank ] && zfs list $copy_ds/$nuos_rev@pkg; then
	nl_rev=0
	while
		nl_jail_name=nuos-lab$nl_rev
		zfs list $POOL_NAME/jail/$nl_jail_name.$NEW_HOST
	do
		nl_rev=$(($nl_rev + 1))
	done
	sister nu_jail ${OPT_VERBOSE:+-v} -C $POOL_MNT -p $POOL_NAME -t clone -w -j $nl_jail_name -s pkg -i 127.1.255.253 -x -q
fi

l_rev=0
while
	l_jail_name=lab$l_rev
	zfs list $POOL_NAME/jail/$l_jail_name.$NEW_HOST
do
	l_rev=$(($l_rev + 1))
done
sister nu_jail ${OPT_VERBOSE:+-v} -C $POOL_MNT -p $POOL_NAME -t clone -w -j $l_jail_name -s $PKG_COLLECTION -i 127.1.255.252 -x -q

[ -n "$ALT_MNT" ] || eval `stat -f "mode=%OMp%03OLp uid=%Du gid=%Dg flags=%Of" $POOL_MNT/var/db/entropy`
chflags schg $POOL_MNT/var/db/entropy
if [ -z "$ALT_MNT" ]; then
	while ! zfs create -o setuid=off -o exec=off -o mountpoint=/var/db/entropy -o logbias=throughput -o sync=disabled $POOL_NAME/entropy 2> /dev/null; do
		zfs destroy $POOL_NAME/entropy
	done
	chown $uid:$gid $POOL_MNT/var/db/entropy
	chmod $mode $POOL_MNT/var/db/entropy
	(umask 77 && dd if=/dev/random of=$POOL_MNT/var/db/entropy/seed count=1 bs=4k)
	chown $uid:$gid $POOL_MNT/var/db/entropy/seed
	chflags $flags $POOL_MNT/var/db/entropy
fi

if [ -n "$curr_host_ver" ]; then
	dismounter -sr $host_ds/$curr_host_ver
fi

zfs set org.nuos:active_revision=v$new_host_rev $host_ds
zpool set bootfs=$new_host_ds $POOL_NAME
zfs snapshot -r $new_host_ds@boot_single_user

if ! zfs create -o mountpoint=/home $POOL_NAME/home; then
	home_existed=y
	if ! zfs mount $POOL_NAME/home; then
		if [ -n "$ALT_MNT" ]; then
			mkdir -p "$ALT_MNT/home"
			mount -t nullfs /home "$ALT_MNT/home"
		fi
	fi
fi

admin_install -z $POOL_MNT

export BASEOS_TYPE
export BASEOS_VER
export HOSTOS_TYPE
export HOSTOS_VER
export TRGT_TYPE=$TRGT
export POOL=$POOL_NAME
export TRGT=$POOL_MNT
export NAME=${NEW_HOST%%.*}
export NUOS="$(realpath "$(dirname "$(realpath "$0")")/..")"
while eval [ -n \"\${LOCAL_SCRIPT_${i:=0}-}\" ]; do
	eval LOCAL_SCRIPT=\${LOCAL_SCRIPT_$i}
	if [ -d "${LOCAL_SCRIPT-}" ]; then
		script_files=`rcorder "$LOCAL_SCRIPT"/*.sh`
		for script_file in "$script_files"; do
			. "$script_file"
		done
	elif [ -f "${LOCAL_SCRIPT-}" ]; then
		. "$LOCAL_SCRIPT"
	fi
	i=$(($i+1))
done

zfs snapshot -r $new_host_ds@sys_birth
if [ -z "${home_existed-}" ]; then
	zfs snapshot -r -o org.nuos:birth_ver=$NUOS_VER $POOL_NAME/home@pool_birth
fi


echo "Initialization of $NEW_HOST running nuOS-$NUOS_VER-$TRGT_TYPE on pool $POOL_NAME is complete."
