#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.99a0 - bin/nu_update
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.99a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts aAc:dDfF:j:Ko:P:qsSuUv OPT; do case $OPT in
	a) incr OPT_AUTO 1;;
	A) incr OPT_DEPRECATED_AUTO_PROCESS 1;;
	c) PKG_COLLECTION=$OPTARG;;
	d) OPT_DEPS=y;;
	D) OPT_DEBUG=y;;
	f) incr OPT_FREEBSD 1;;
	F) FBSD_COMMIT_ID=$OPTARG;;
	j) JAIL_NAME=$OPTARG;;
	K) OPT_KEEP_FAT_OBJ=y;;
	o) OUTPUT_FILE=$OPTARG;;
	P) PORTS_COMMIT_ID=$OPTARG;;
	q) OPT_QUICK=y;;
	s) OPT_ONLY_SNAP=y;;
	S) OPT_NO_SNAP=y;;
	u) OPT_UPDATES=y;;
	U) OPT_DEP_UPDATES=y;;
	v) [ -n "${OPT_VERBOSE-}" ] && export OPT_VERBOSE; OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -n "${OPT_ONLY_SNAP-}" ] || [ -n "${OPT_DEPRECATED_AUTO_PROCESS-}" -a -z "${OUTPUT_FILE-}" ] || [ ! -e "$OUTPUT_FILE" -o ! -s "$OUTPUT_FILE" ]

load_lib nu_collection

baseos_init
nuos_init
collection_vars_init -q

if [ -n "${OPT_DEPRECATED_AUTO_PROCESS-}" ]; then
	: ${JAIL_NAME:=lab}
	require_tmp auto_output
	OUTPUT_FILE="$auto_output"
fi

if [ -n "${JAIL_NAME-}" ]; then
	CHROOTDIR=`jls -h -j $JAIL_NAME path | sed -e 1d`
	[ -n "$CHROOTDIR" ] || (echo "Error: Cannot find jail $JAIL_NAME running." && exit 1)
fi

load_lib nu_make nu_ports nu_install

make_vars_init
pkg_suffix_init

maybe_pause
maybe_yell

cd /var/empty

old_tag=`pkg_db_tag`
ports_tag=`ports_tag`

[ $ports_tag = $old_tag ]

if echo $ports_tag | grep -q ^g; then
	ports_git=y;
fi

if ! srsly ${OPT_NO_SNAP-}; then
	packages_dataset=`mount -p | awk '{if ($2=="/usr/ports/packages") print $1}'`
	snaptime=t`date +%s`
	zfs snapshot -r $POOL_BOOT_NAME/os/$BASEOS_TYPE/ports@$snaptime $packages_dataset@$snaptime
fi
! srsly ${OPT_ONLY_SNAP-} || exit

require_ports_tree -e


[ -d "${CHROOTDIR-}$NU_PKG_DBDIR" -a ! -L "${CHROOTDIR-}$NU_PKG_DBDIR" ]
mv "${CHROOTDIR-}$NU_PKG_DBDIR" "${CHROOTDIR-}$NU_PKG_DBDIR.$old_tag"
ln -s `basename $NU_PKG_DBDIR`.$old_tag "${CHROOTDIR-}$NU_PKG_DBDIR"

if srsly ${ports_git-}; then
	which git > /dev/null
	git -C /usr/ports reset --hard HEAD
	git -C /usr/ports clean -fd
	git -C /usr/ports pull
	if canhas ${PORTS_COMMIT_ID-}; then
		git -C /usr/ports reset --hard $PORTS_COMMIT_ID
	fi
else
	portsnap fetch
	portsnap update
fi

if [ -n "${ports_git-}" ]; then
	new_tag=`save_git_info -r /usr/ports`
# 	last_modified=$(date -j -f "%F %T" "$(sed -e '/^Last Changed Date: /!d;s///;s/ +0000$//' /usr/ports/.git/info.txt)")
	last_modified=$(env TZ=UTC date -j -f '%F %T %z' "$(sed -e '/^Last Changed Date: /!d;s///' /usr/ports/.git/info.txt)")
else
	new_tag=`cut -d '|' -f 2 /var/db/portsnap/tag`
	last_modified=`env TZ=UTC date -j -f %s $new_tag`
fi

echo
echo "Ports tree is now tagged $new_tag ($last_modified)."

if canhas ${OPT_FREEBSD-}; then
	make_vars_init
	build_vars_init
	require_base_src -n
	before_rev=`save_git_info -r /usr/src`
	if ! srsly ${OPT_NO_SNAP-}; then
		before_src_ds=`mount -p | awk '$2 == "/usr/src" {print $1}' | tail -n 1`
		before_obj_ds=`mount -p | awk '$2 == "/usr/obj" {print $1}' | tail -n 1`
		zfs snapshot -r $before_src_ds@$snaptime $before_obj_ds@$snaptime
		zfs set canmount=noauto $before_src_ds
		zfs unmount $before_src_ds
		zfs clone -o mountpoint=/usr/src $before_src_ds@$snaptime ${before_src_ds%.g*}.$snaptime
	fi
	want_src="https://$GIT_SERVER/$GIT_PATH.git"
	have_src=`git -C /usr/src config --get remote.origin.url`
	want_branch=$GIT_BRANCH
	have_branch=`git -C /usr/src branch | grep '^* ' | cut -w -f 2`
	lower_case -s want_src have_src
	git -C /usr/src reset --hard HEAD
	git -C /usr/src clean -fd
	if [ _"$want_src_lc" != _"$have_src_lc" ]; then
		git -C /usr/src remote set-url origin "$want_src"
	fi
	git -C /usr/src pull
	if [ _"$want_branch" != _"$have_branch" ]; then
		git -C /usr/src checkout "$want_branch"
	fi
	if canhas ${FBSD_COMMIT_ID-}; then
		git -C /usr/src reset --hard $FBSD_COMMIT_ID
	fi
	after_rev=`save_git_info -r /usr/src`
	before_ver=$BASEOS_VER
	baseos_init
	echo -n "FreeBSD source tree: $before_ver.$before_rev"
	if [ $before_rev != $after_rev -o $before_ver != $BASEOS_VER ]; then
		echo " -> $BASEOS_VER.$after_rev"
		if [ $before_ver != $BASEOS_VER ] || canhas "`git -C /usr/src diff ${before_rev#g} ${after_rev#g} | head -c 16`" ]; then
			if ! srsly ${OPT_NO_SNAP-}; then
				zfs set canmount=noauto $before_obj_ds
				zfs unmount $before_obj_ds
			fi
			if [ $before_ver = $BASEOS_VER ]; then
				same_ver=y
				after_obj_ds=${before_obj_ds%.g*}${same_ver:+.$after_rev}
			else
				after_obj_ds=${before_obj_ds%/*}/$BASEOS_VER
			fi
			if ! srsly ${OPT_NO_SNAP-}; then
				zfs rename ${before_src_ds%.g*}.$snaptime $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER${same_ver:+.$after_rev}
				zfs create -o mountpoint=/usr/obj ${after_obj_ds}__tmp
			fi
			if [ ${OPT_FREEBSD-} -ge 2 ]; then
				require_base_src
				if ! srsly ${OPT_NO_SNAP-} && which rsync; then
					require_tmp -d old_obj
					mount -t zfs $before_obj_ds "$old_obj"
					zfs clone $before_obj_ds@$snaptime ${after_obj_ds}__wip
					require_tmp -d new_obj
					mount -t zfs ${after_obj_ds}__wip "$new_obj"
					require_tmp -d rsync_pipe
					mkfifo -m 600 "$rsync_pipe/o"
				
					spill before_ver
					spill snaptime
					spill rsync_pipe
					spill old_obj
					spill new_obj
					spill POOL_BOOT_NAME
					spill BASEOS_TYPE
					spill TRGT_MACH
					spill TRGT_CODE
					spill BASEOS_VER
					spill same_ver
					spill after_rev
					spill OPT_FREEBSD
					spill TRGT_KERN
				
					rsync -aHAXSIc --delete --only-write-batch="$rsync_pipe/o" /usr/obj/ "$old_obj/" &
					rsync -aHAXSIc --delete -v --read-batch="$rsync_pipe/o" "$new_obj/"
					wait
					retire_tmp rsync_pipe
					umount "$old_obj"
					retire_tmp old_obj
					umount "$new_obj"
					retire_tmp new_obj
					if canhas "${OPT_KEEP_FAT_OBJ-}"; then
						zfs set canmount=noauto ${after_obj_ds}__tmp
						zfs unmount ${after_obj_ds}__tmp
						zfs rename ${after_obj_ds}__tmp ${after_obj_ds}__fat
					else
						zfs destroy ${after_obj_ds}__tmp
					fi
					zfs rename ${after_obj_ds}__wip $after_obj_ds
					zfs set mountpoint=/usr/obj $after_obj_ds
				fi
				if [ ${OPT_FREEBSD-} -ge 3 ]; then
					(
						cd /usr/src
						make -D WITHOUT_KERNEL_SYMBOLS KERNCONF=$TRGT_KERN installkernel installworld

						# XXX: below is not adequate but only for patchlevel upgrades within a RELEASE. see share/fbsd-divergence/omitted and
						#      lib/nu_make.sh:prepare_src_conf()
						# TODO: nu_build has some repeat-myself that ought to be refactored before it gets out of hand. for now just be aware
						cd /
						tail -r "$NUOS_CODE/share/fbsd-divergence/omitted" | grep ^/ | xargs rm -dfv
						# TODO: handle this programmatically using share/fbsd-divergence/renamed
						mv -fv /usr/bin/openssl /usr/bin/openssl.fbsd
					)
				fi
			fi
		elif ! srsly ${OPT_NO_SNAP-}; then
			srsly ${new_build-} || obj_trgt=$TRGT
			srsly ${old_build-} || obj_trgt=$TRGT_CODE
			zfs rename ${before_src_ds%.g*}.$snaptime $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/$BASEOS_VER.$after_rev
			zfs rename $before_obj_ds $POOL_BOOT_NAME/os/$BASEOS_TYPE/src/obj/$obj_trgt/$BASEOS_VER.$after_rev
		fi
	else
		echo
		if ! srsly ${OPT_NO_SNAP-}; then
			zfs destroy ${before_src_ds%.g*}.$snaptime
			zfs set canmount=on $before_src_ds
			zfs mount $before_src_ds
		fi
	fi
fi

if canhas ${OPT_AUTO-} && [ -L $NU_PKG_DBDIR ]; then
	pkgs_dir=/usr/ports/packages/Index.nuOS/$BASEOS_TYPE-${BASEOS_VER%%-*}-$TRGT
	if [ "$old_tag" = "$new_tag" ] && [ _$PKG_COLLECTION = _`cat ${CHROOTDIR-}$NU_PKG_DBDIR/root` ]; then
		rm "${CHROOTDIR-}$NU_PKG_DBDIR"
		mv "${CHROOTDIR-}$NU_PKG_DBDIR.$old_tag" "${CHROOTDIR-}$NU_PKG_DBDIR"
	else
		sister nu_pkg_tree -o dir ${CHROOTDIR-}$NU_PKG_DBDIR $PKG_COLLECTION
	fi
	sister nu_pkg_chk_tree || error 62 'Loop found in package directives'
	
	require_tmp want
	(ls -d $NU_PKG_DBDIR/*_*/dependencies | sed -e 's/dependencies$/name/' | xargs cat; for p in `pkg info -qox ^bootstrap-`; do (cd /usr/ports/$p; make -V PKGNAME); done) | sort -u >| "$want"
	require_tmp have
	pkg info -q | sort >| "$have"
	require_tmp kill
	diff "$have" "$want" | grep '^<' | cut -wf2 >| "$kill"
	require_tmp make
	diff "$have" "$want" | grep '^>' | cut -wf2 >| "$make"
	
	if [ ${OPT_AUTO-} -ge 2 -a -s "$kill" ]; then
# 		newest_pkg_before=`ls -t $pkgs_dir | head -n 1`
		pkg delete -fy `cat "$kill"`
		while read -r pkg; do
			rm -v /usr/ports/packages/All/$pkg.$PKG_SUFFIX || true
			mkdir -p $pkgs_dir.old
			mv -v $pkgs_dir/$pkg.g*.*.$PKG_SUFFIX \
					$pkgs_dir.old/ \
				|| true
		done < "$kill"
	fi
	if [ ${OPT_AUTO-} -ge 3 -a -s "$make" ]; then
# 			[ ${OPT_AUTO-} -le 3 ] || all=y
# 			[ ${OPT_AUTO-} -le 4 ] || every=y
# 			sister nu_pkg_build_cluster ${all:+-a} ${every:+-a} -w 3
		sister nu_install_pkg -d $NU_PKG_DBDIR
		echo Done building new $PKG_COLLECTION packages.
	fi
# 	newest_pkg_after=`ls -t $pkgs_dir | head -n 1`
fi

echo Update done.
