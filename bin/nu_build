#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.99a0 - bin/nu_build
#
# Copyright (c) 2008-2022 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.99a0
. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts Bc:FMNp:qr:Sv OPT; do case $OPT in
	B) OPT_NOBRAND=y;;
	c) PKG_COLLECTION=$OPTARG;;
	F) OPT_SKIP_FBSD=y;;
	M) OPT_NOMAKE=y;;
	N) OPT_SKIP_NUOS=y;;
	p) POOL_NAME=$OPTARG;;
	q) OPT_QUICK=y;;
	r) RELEASE_ID=$OPTARG;;
	S) OPT_SKIP_FACTORY=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

load_lib nu_admin nu_make nu_ports nu_collection nu_install

baseos_init
nuos_init
make_vars_init
collection_vars_init
build_vars_init

maybe_pause
maybe_yell

[ -n "${OPT_SKIP_FBSD-}" -a -n "${OPT_SKIP_NUOS-}" ] || require_base_src

set_pool_root_mnt_vars $POOL_NAME

os_software_ds=$POOL_NAME/os
fbsd_proj_ds=$os_software_ds/$BASEOS_TYPE
fbsd_os_ds=$fbsd_proj_ds/$BASEOS_VER
fbsd_bin_ds=$fbsd_os_ds/$TRGT


baseos_minor_ver=${BASEOS_VER%%-*}
baseos_major_ver=${baseos_minor_ver%%.*}
case $BASEOS_TYPE in
	FreeBSD)
		if [ $baseos_major_ver -ge 13 ]; then
			new_motd=y
		fi
	;;
esac

if [ -n "${OPT_SKIP_FBSD-}" -o -n "${OPT_SKIP_NUOS-}" ]; then
	fbsd_sysroot_ds=$fbsd_bin_ds/`zfs get -H -o value org.nuos:active_revision $fbsd_bin_ds`
fi
if [ -z "${OPT_SKIP_FBSD-}" ]; then
	
	! canhas ${RELEASE_ID-} || (! zfs list $fbsd_bin_ds/$RELEASE_ID)
	require_base_src
	
	zfs create -p -o mountpoint=none -o canmount=off $os_software_ds
	zfs create -p -o mountpoint=none -o canmount=off $fbsd_proj_ds
	zfs create -p -o mountpoint=none -o canmount=off $fbsd_os_ds
	zfs create -p -o mountpoint=none -o canmount=off $fbsd_bin_ds
	
	
	find_next_monotonic fbsd_sysroot_ds $fbsd_bin_ds ${RELEASE_ID-}
	fbsd_bld_id=${fbsd_sysroot_ds##*/}
	
	zgen_cmd="zfs create -o canmount=noauto"
		
	$zgen_cmd \
		-o "mountpoint=${ALT_MNT:-/}"                   $fbsd_sysroot_ds
	
		$zgen_cmd                                           $fbsd_sysroot_ds/etc
	
			$zgen_cmd \
				-o "mountpoint=$ALT_MNT/usr/local/etc"          $fbsd_sysroot_ds/etc/local
	
		$zgen_cmd \
			-o setuid=off                                   $fbsd_sysroot_ds/var
	
			$zgen_cmd \
				-o exec=off                                     $fbsd_sysroot_ds/var/db
	
			$zgen_cmd \
				-o exec=off                                     $fbsd_sysroot_ds/var/audit
	
			$zgen_cmd \
				-o exec=off                                     $fbsd_sysroot_ds/var/crash
	
			$zgen_cmd \
				-o exec=off                                     $fbsd_sysroot_ds/var/log
	
			$zgen_cmd \
				-o exec=off \
				-o atime=on                                     $fbsd_sysroot_ds/var/mail
	
			$zgen_cmd                                           $fbsd_sysroot_ds/var/tmp
	
	zfs list -Hro mountpoint,name $fbsd_sysroot_ds | sort | cut -wf2 | xargs -n1 zfs mount
	
	if [ -n "${OPT_NOMAKE-}" ]; then
		mkdir $POOL_MNT/boot $POOL_MNT/boot/zfs $POOL_MNT/etc/ssh $POOL_MNT/etc/rc.d
		touch $POOL_MNT/etc/login.conf.db
		cp /usr/src/COPYRIGHT $POOL_MNT/COPYRIGHT
		echo 'FreeBSD ?.?.?  (UNKNOWN)' > $POOL_MNT/etc/motd${new_motd:+.template}
	else
		(cd /usr/src && make -D WITHOUT_KERNEL_SYMBOLS DESTDIR=$POOL_MNT KERNCONF=$TRGT_KERN installkernel installworld distribution)
	fi
	:> $POOL_MNT/etc/fstab
	
	cat > $POOL_MNT/boot/loader.conf <<'EOF'
init_script="/boot/init.sh"
EOF
	
	cat > $POOL_MNT/boot/init.sh <<'EOF'
#!/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
mountfrom=`kenv vfs.root.mountfrom`
root_ds=${mountfrom#zfs:}
zfs mount $root_ds/etc
EOF
	
	zfs snapshot -r $fbsd_sysroot_ds@freebsd_dist

	srsly ${new_build-} || obj_trgt=$TRGT
	srsly ${old_build-} || obj_trgt=$TRGT_CODE
		
	zfs create -po setuid=off -o mountpoint=none -o canmount=off $fbsd_proj_ds/src
	zfs create -upo mountpoint=/usr/src $fbsd_proj_ds/src/$BASEOS_VER
	zfs create -po mountpoint=none -o canmount=off $fbsd_proj_ds/src/obj/$obj_trgt
	zfs create -upo mountpoint=/usr/obj $fbsd_proj_ds/src/obj/$obj_trgt/$BASEOS_VER
	zfs create -po setuid=off -o mountpoint=none -o canmount=off $fbsd_proj_ds/ports
	zfs create -upo exec=off -o mountpoint=/var/db/portsnap $fbsd_proj_ds/ports/snap-db
	zfs create -upo mountpoint=/usr/ports $fbsd_proj_ds/ports/src
	zfs create -upo exec=off -o mountpoint=/usr/ports/distfiles $fbsd_proj_ds/ports/distfiles

	cat >> $POOL_MNT/boot/loader.conf <<'EOF'
zfs_load="YES"
EOF
	
	cat > $POOL_MNT/etc/rc.conf <<'EOF'
zfs_enable="YES"
zfsd_enable="YES"
EOF
	
	zfs snapshot -r $fbsd_sysroot_ds@zfs_enabled
	
	cat >> $POOL_MNT/etc/fstab <<EOF
# Device		Mountpoint	FStype	Options		Dump	Pass#
tmp /tmp tmpfs rw,nosuid,size=32m 0 0
EOF
	
	zfs snapshot -r $fbsd_sysroot_ds@tmpfs_enabled
	
	(cd $POOL_MNT && mkdir -p compat/linux/dev compat/linux/proc compat/linux/sys usr/ports/packages)
	
	zfs snapshot -r $fbsd_sysroot_ds@pkg_ready
	zfs set org.nuos:active_revision=$fbsd_bld_id $fbsd_bin_ds
	
	freeze $fbsd_sysroot_ds
	zfs set readonly=on $fbsd_sysroot_ds
fi

nuos_proj_ds=$os_software_ds/nuOS
nuos_os_ds=$nuos_proj_ds/$NUOS_VER
nuos_bin_ds=$nuos_os_ds/$TRGT

if [ -n "${OPT_SKIP_NUOS-}" ]; then
	nuos_sysroot_ds=$nuos_bin_ds/`zfs get -H -o value org.nuos:active_revision $nuos_bin_ds`
else
	
	! canhas ${RELEASE_ID-} || (! zfs list $nuos_bin_ds/$RELEASE_ID)

	zfs create -p -o mountpoint=none -o canmount=off $nuos_proj_ds
	zfs create -p -o mountpoint=none -o canmount=off $nuos_os_ds
	zfs create -p -o mountpoint=none -o canmount=off $nuos_bin_ds
	
	find_next_monotonic nuos_sysroot_ds $nuos_bin_ds ${RELEASE_ID-}
	nuos_bld_id=${nuos_sysroot_ds##*/}
	
	sister nu_cloner -mp $POOL_NAME ${fbsd_sysroot_ds#$POOL_NAME/}@pkg_ready ${nuos_sysroot_ds#$POOL_NAME/}
	
	cat > $POOL_MNT/usr/local/etc/beadm.conf <<'EOF'
echo beadm is incompatible with nuOS >&2
exit 79
EOF
	
	cat >> $POOL_MNT/etc/fstab <<'EOF'
tmp /var/run tmpfs rw,nosuid,size=4m 0 0
fdesc /dev/fd fdescfs rw 0 0
proc /proc procfs rw 0 0
tmp /compat/linux/dev/shm tmpfs nu,xx,update,nosuid,mode=1777,size=16m 0 0
EOF
	if [ $baseos_major_ver -le 12 ]; then
		cat >> $POOL_MNT/etc/fstab <<'EOF'
linproc /compat/linux/proc linprocfs rw 0 0
linsys /compat/linux/sys linsysfs rw 0 0
EOF
	fi
	
	cat >> $POOL_MNT/boot/loader.conf <<'EOF'
autoboot_delay="5"
kern.ipc.shmseg="1024"
kern.ipc.shmmni="1536"
kern.ipc.semmnu="3000"
kern.ipc.semmns="7500"
kern.ipc.semmni="1000"
kern.racct.enable="1"
hw.vmm.amdvi.enable="1"
EOF
	
	cat >> $POOL_MNT/etc/rc.conf <<'EOF'
linux_enable="YES"
kld_list="aesni geom_eli ipfw ng_ether ng_bridge nmdm vmm sem cuse accf_data accf_dns accf_http cc_cdg"
entropy_file="/var/db/entropy/seed"
var_run_enable="YES"
var_run_autosave="NO"
keyrate="fast"
firewall_enable="YES"
firewall_type="open"
firewall_nat_flags="same_ports reset"
firewall_nat_interface="net0"
devfs_load_rulesets="YES"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
openssh_dsa_enable="NO"
openssh_rsa_flags="-b 4096"
openssh_ecdsa_flags="-b 521"
EOF
	
	cat >> $POOL_MNT/etc/hosts <<EOF
127.128.0.0		warden.myname.my.domain warden.jail warden
EOF
	
	mkdir -p $POOL_MNT/etc/rc.conf.d.off
	
	cat > $POOL_MNT/etc/rc.conf.d.off/ntpd <<'EOF'
ntpd_sync_on_start="YES"
EOF

	cat > $POOL_MNT/etc/rc.conf.d.off/jail <<'EOF'
jail_reverse_stop="YES"
jail_list=""
EOF
	
	cat > $POOL_MNT/etc/rc.conf.local <<'EOF'
#gateway_enable="YES"
#firewall_nat_enable="YES"
firewall_logif="YES"

# replace 'vtnet0' with the name of your primary upstream network interface
ifconfig_vtnet0_name="net0"

# if you have a static IP address asignment, replace 'up' with your inet configuration
ifconfig_net0="up -rxcsum -rxcsum6 -txcsum -txcsum6 -lro -tso -vlanhwcsum -vlanhwtso -vxlanhwcsum -vxlanhwtso"
EOF
	
	cat >> $POOL_MNT/etc/sysctl.conf <<'EOF'

# Maximum number of IPv4 fragment reassembly queue entries
# FreeBSD 11.2 default: 31311
net.inet.ip.maxfragpackets=0

# Maximum number of IPv4 fragments allowed per packet
# FreeBSD 11.2 default: 16
net.inet.ip.maxfragsperpacket=0

# Incrementor step size of automatic receive buffer
# FreeBSD 11.2 default: 16384
net.inet.tcp.recvbuf_inc=65536

# Max size of automatic receive buffer
# FreeBSD 11.2 default: 2097152
net.inet.tcp.recvbuf_max=16777216

# Initial receive socket buffer size
# FreeBSD 11.2 default: 65536
net.inet.tcp.recvspace=131072

# Incrementor step size of automatic send buffer
# FreeBSD 11.2 default: 8192
net.inet.tcp.sendbuf_inc=65536

# Max size of automatic send buffer
# FreeBSD 11.2 default: 2097152
net.inet.tcp.sendbuf_max=16777216

# Initial send socket buffer size
# FreeBSD 11.2 default: 32768
net.inet.tcp.sendspace=131072

# Default congestion control algorithm
# FreeBSD 11.2 default: newreno
net.inet.tcp.cc.algorithm=cdg

# Increment the window increase factor alpha by 1 MSS segment every alpha_inc RTTs during congestion avoidance mode
# FreeBSD 11.2 default: 0
net.inet.tcp.cc.cdg.alpha_inc=1

# Enable/disable TCP Fast Open server functionality
# FreeBSD 13.1 default: 0
net.inet.tcp.fastopen.server_enable=1

# Default TCP Maximum Segment Size
# FreeBSD 11.2 default: 536
net.inet.tcp.mssdflt=1240

# Minimum TCP Maximum Segment Size
# FreeBSD 11.2 default: 216
net.inet.tcp.minmss=536

# Use calculated pipe/in-flight bytes per RFC 6675
# FreeBSD 11.2 default: 0
net.inet.tcp.rfc6675_pipe=1

# Limit on SYN/ACK retransmissions
# FreeBSD 11.2 default: 3
net.inet.tcp.syncache.rexmtlimit=0

# Cap the max cwnd increment during slow-start to this number of segments
# FreeBSD 11.2 default: 2
net.inet.tcp.abc_l_var=50

# Slow-start flight size (initial congestion window) in number of segments
# FreeBSD 11.2 default: 10
net.inet.tcp.initcwnd_segments=50

# Max ZFS L2ARC write size
# FreeBSD 11.2 default: 8388608
vfs.zfs.l2arc_write_max=419430400

# Extra write during ZFS L2ARC warmup
# FreeBSD 11.2 default: 8388608
vfs.zfs.l2arc_write_boost=419430400

# Number of ZFS L2ARC dev writes
# FreeBSD 11.2 default: 2
vfs.zfs.l2arc_headroom=8

# No ZFS L2ARC reads during writes
# FreeBSD 11.2 default: 1
vfs.zfs.l2arc_norw=0

# I/O requests are aggregated up to this size
# FreeBSD 11.2 default: 131072
vfs.zfs.vdev.aggregation_limit=1048576

# Use crypto operations batching
# FreeBSD 11.4 default: 0
kern.geom.eli.batch=1
EOF
	
	cat > $POOL_MNT/etc/periodic.conf <<'EOF'
daily_output="/var/log/daily.log"
weekly_output="/var/log/weekly.log"
monthly_output="/var/log/monthly.log"
daily_status_security_inline="YES"
daily_show_success="NO"
weekly_show_success="NO"
monthly_show_success="NO"
security_status_chksetuid_enable="NO"
security_status_neggrpperm_enable="NO"
daily_clean_hoststat_enable="NO"
daily_status_mail_rejects_enable="NO"
daily_status_include_submit_mailq="NO"
daily_submit_queuerun="NO"
weekly_locate_enable="NO"
weekly_whatis_enable="NO"
EOF
	
	cat >> $POOL_MNT/etc/ssh/sshd_config <<'EOF'
UseDNS no
EOF
	
	cat > $POOL_MNT/etc/jail.conf`[ ! -d $POOL_MNT/etc/jail.conf.d ] || echo .template` <<'EOF'
$tmpfs_args = "-o size=3221225472";
path = "/var/jail/$name";
host.hostname = "$name.jail";
devfs_ruleset = 4;
exec.clean;
#exec.consolelog = "/var/log/jail/$name.log"
exec.prestart += "mount -t devfs dev $path/dev && devfs -m $path/dev ruleset $devfs_ruleset && devfs -m $path/dev rule applyset && ln -sf /var/run/log $path/dev/log";
exec.prestart += "mount -t fdescfs fdesc $path/dev/fd";
exec.prestart += "mount -t tmpfs -o nosuid $tmpfs_args tmp $path/tmp";
exec.prestart += "mount -t procfs proc $path/proc";
exec.start = "/bin/sh /etc/rc";
exec.stop = "/bin/sh /etc/rc.shutdown jail";
exec.poststop += "umount $path/proc";
exec.poststop += "umount $path/tmp";
exec.poststop += "umount $path/dev/fd";
exec.poststop += "umount $path/dev";
enforce_statfs = 1;
ip_hostname;
allow.chflags;
allow.quotas;
children.max = 256;
EOF
	
	prepare_make_conf -i make_conf retire_make_conf_cmd
	cat "$make_conf" > $POOL_MNT/etc/make.conf
	$retire_make_conf_cmd make_conf
	
	prepare_src_conf -i src_conf retire_src_conf_cmd
	cat "$src_conf" > $POOL_MNT/etc/src.conf
	$retire_src_conf_cmd src_conf
	
	zfs list -H -r -o mountpoint,name $nuos_sysroot_ds | tail -n +2 | sort | while IFS=$'\t' read -r mp ds; do
		dsp=${ds#$nuos_sysroot_ds/}
		[ etc != "$dsp" ] || continue
		eko zfs mount '$root_ds'/$dsp
	done >> $POOL_MNT/boot/init.sh
	
	cat >> $POOL_MNT/boot/init.sh <<'EOF'
pool=${root_ds%%/*}
sw_spc=`zfs get -H -o value org.nuos:swap_space $root_ds`
for v in `zfs list -H -r -o name -t volume $pool/swap`; do
	zfs destroy -r $v
done
case $sw_spc in
	-) ;;
	eli:*) eli= ;&
	*) zfs create -p ${eli--o org.freebsd:swap=on} -b 32K -V ${sw_spc#eli:} $pool/swap/sw0
esac
EOF
	
	cat > $POOL_MNT/etc/rc.d/nuos_linshm <<'EOF'
#!/bin/sh

# PROVIDE: nuos_linshm
# REQUIRE: linux
# BEFORE: localpkg

. /etc/rc.subr

name="nuos_linshm"
desc="Modify /compat/linux/dev/shm according to /etc/fstab"
start_cmd="${name}_start"
stop_cmd=":"
rcvar="${name}_enable"
: ${nuos_linshm_enable:=YES}

nuos_linshm_start ()
{
	awk '$3 == "tmpfs" && $4 ~ /(^|,)nu,xx($|,)/ {
			gsub(/,/, " ", $4); print $2, $4
		}' /etc/fstab \
	| while read -r mp opts; do
		x= u= opt= pre= args= m= mode= uid= gid= flags=
		for o in $opts; do
			case $o in
				nu) x=y;;
				xx) :;;
				late) continue 2;;
				update|remount) u=y;;
				rw) opt=-w;;
				ro) opt=-r;;
				mode=*) m=${o#mode=} ;&
				*) args="${args:+$args }-o $o";;
			esac
		done
		if [ x$x = xy ]; then
			if [ x$u = xy ]; then
				eval `stat -f "mode=%OMp%03OLp uid=%Du gid=%Dg flags=%Of" "$mp"`
				for o in $(mount -pt tmpfs | awk "\$2 == \"$mp\" {gsub(/,/, \" \", \$4); print \$4}"); do
					case $o in
						rw) pre=-w;;
						ro) pre=-r;;
						*) args="-o $o${args:+ $args}";
					esac
				done
				umount -f "$mp" || continue 2
			fi
			mount ${opt:-$pre} $args -t tmpfs tmp "$mp"
			if [ x$u = xy ]; then
				chown $uid:$gid "$mp"
				chmod $mode "$mp"
				chmod $m "$mp"
				chflags $flags "$mp"
			fi
		fi
	done
}

load_rc_config $name
run_rc_command "$1"
EOF
	chmod a-w+rx $POOL_MNT/etc/rc.d/nuos_linshm
	
	cat > $POOL_MNT/etc/rc.d/nuos_firstboot <<'EOF'
#!/bin/sh

# PROVIDE: nuos_firstboot
# REQUIRE: LOGIN syscons swaplate sshd cron jail localpkg securelevel power_profile nfscbd natd msgs moused mixer kpasswdd kfd kadmind ipropd_slave ipropd_master ipfw_netflow inetd hostapd gptboot geli2 ftpd ftp-proxy dhclient bsnmpd bluetooth blacklistd bgfsck
# KEYWORD: firstboot

. /etc/rc.subr

name="nuos_firstboot"
desc="Kick off nuOS system site/local/user custom genesis procedure"
start_cmd="${name}_start"
stop_cmd=":"
rcvar="${name}_enable"
: ${nuos_firstboot_log:=/var/log/${name}.log}

nuos_firstboot_start ()
{
	echo "It seems this is the first boot of a nuOS system requiring a genesis procedure"
	if [ -n "$nuos_firstboot_script" ] && [ "$nuos_firstboot_script" != "${nuos_firstboot_script%.sh}" ] && [ -f "$nuos_firstboot_script" ]; then
		(
			umask 77
			touch "$nuos_firstboot_log"
		)
		echo "Evaluating $nuos_firstboot_script in the background and logging to $nuos_firstboot_log"
		(
			export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/nuos/bin
			export HOME=/root
			date
			time sh "$nuos_firstboot_script"
		) >> "$nuos_firstboot_log" 2>&1 &
	elif [ -n "$nuos_firstboot_script" ] && [ "$nuos_firstboot_script" != "${nuos_firstboot_script%.sh}" ]; then
		echo "ERROR: nuos_firstboot_script '$nuos_firstboot_script' was not found"
	elif [ -n "$nuos_firstboot_script" ]; then
		echo "ERROR: nuos_firstboot_script '$nuos_firstboot_script' is not in the proper format"
	else
		echo "ERROR: nuos_firstboot_script was not specified in resource control configuration"
	fi
}

load_rc_config $name
run_rc_command "$1"
EOF
	chmod a-w+rx $POOL_MNT/etc/rc.d/nuos_firstboot
	
	mkdir $POOL_MNT/etc/nuos
	if [ -z "${OPT_NOBRAND-}" ]; then
		
		sed -i '' -Ee 's/^(The compilation of software known as )FreeBSD /\1nuOS /;/^Copyright\>.*\<The FreeBSD Project\>/a\
Copyright (c) 2008-2022 Chad Jacob Milios and Crop Circle Systems.' $POOL_MNT/COPYRIGHT
		
		if ! [ -f "$NUOS_CODE/share/boot/nuos-mascot.png" -a -f "$NUOS_CODE/share/boot/nuos-brand.png" ]; then
			user=`stat -f %Su "$NUOS_CODE/share/boot"`
			make -C "$NUOS_CODE/share/boot"
			chown -R $user "$NUOS_CODE/share/boot"
		fi
		cp "$NUOS_CODE/share/boot/nuos-brand.png" "$NUOS_CODE/share/boot/nuos-mascot.png" \
			$POOL_MNT/boot/images/
		cp "$NUOS_CODE/share/boot/gfx-nuos.lua" $POOL_MNT/boot/lua/
		chmod 444 $POOL_MNT/boot/lua/gfx-nuos.lua $POOL_MNT/boot/images/nuos-brand.png $POOL_MNT/boot/images/nuos-mascot.png
		
		cat >> $POOL_MNT/boot/loader.conf <<'EOF'
loader_brand="nuos"
loader_logo="nuos"
EOF
		
		baseos_info_url="https://$BASEOS_TYPE.org"
		
		lower_case -s BASEOS_TYPE
		mv -n $POOL_MNT/etc/motd${new_motd:+.template} $POOL_MNT/etc/motd${new_motd:+.template}.$BASEOS_TYPE_lc
		if ! srsly ${new_motd-}; then
			head -n 1 $POOL_MNT/etc/motd.$BASEOS_TYPE_lc > $POOL_MNT/etc/motd
		fi
		cat >> $POOL_MNT/etc/motd${new_motd:+.template} <<EOF
nuOS $NUOS_VER

Welcome! Thank you for choosing nuOS.

Official updates and community support available at https://nuOS.org .

This is the $BASEOS_TYPE edition of nuOS, extending $BASEOS_TYPE $BASEOS_VER. More
information about $BASEOS_TYPE is available at $baseos_info_url .

Your contributions are greatly appreciated and allow nuOS to thrive.

Edit /etc/motd${new_motd:+.template and run \`service motd restart\`} to change this login announcement.

EOF
		
		mkdir $POOL_MNT/usr/nuos
		tar -cf - -C "$(dirname "$(realpath "$0")")/.." --exclude .DS_Store --exclude .directory --exclude node_modules --exclude ^conf --exclude '^.?*' --exclude ^www/dist --exclude '^www/*.log' . | tar -x${OPT_VERBOSE:+v}f - -C $POOL_MNT/usr/nuos
		chown -R root:wheel $POOL_MNT/usr/nuos
		conf=usr/nuos/conf
		
	else
		conf=etc/nuos/conf
		echo HOSTOS_NOBRAND=y > $POOL_MNT/$conf
	fi
	
	cat > $POOL_MNT/etc/nuos/backup <<'EOF'
home
?svc
EOF
	
	cat >> $POOL_MNT/$conf <<EOF
HOSTOS_TYPE=nuOS
HOSTOS_VER=$NUOS_VER
PARENT=`whoami`@`hostname`
PARENT_HOSTOS_TYPE=$HOSTOS_TYPE
PARENT_HOSTOS_VER=$HOSTOS_VER
PARENT_BASEOS_TYPE=`uname -s`
PARENT_BASEOS_VER=`uname -r`
PARENT_KERN=`uname -v | awk '{print $NF}'`
POOL_BASEOS_TYPE=$BASEOS_TYPE
POOL_BASEOS_VER=$BASEOS_VER
POOL_HOSTOS_TYPE=nuOS
POOL_HOSTOS_VER=$NUOS_VER
HOSTOS_ARCH=$TRGT_ARCH
HOSTOS_PROC=$TRGT_PROC
HOSTOS_MACH=$TRGT_MACH
HOSTOS_KERN=$TRGT_KERN
HOSTOS_CHIP=$TRGT_CHIP
HOSTOS_OPTZ=$TRGT_OPTZ
EOF
	
	zfs set org.nuos:active_revision=$nuos_bld_id $nuos_bin_ds
	
	if [ -n "${OPT_NOMAKE-}" ]; then
		PKG_COLLECTION=blank
	fi
	
	if [ $PKG_COLLECTION = blank ]; then
		zfs snapshot -r $nuos_sysroot_ds@blank
	else
		require_ports_tree
		ports_tag
		mount -t tmpfs -o nosuid tmpfs $POOL_MNT/tmp
		require_tmp -c -C $POOL_MNT pkg_tree
		mount -r -t nullfs /usr/ports $POOL_MNT/usr/ports
		mount -r -t nullfs /var/db/portsnap $POOL_MNT/var/db/portsnap
		sister nu_pkg_tree ${OPT_VERBOSE:+-v} -o dir $POOL_MNT/$PKG_DBDIR $PKG_COLLECTION
		sister nu_pkg_tree ${OPT_VERBOSE:+-v} -i $POOL_MNT/$PKG_DBDIR $PKG_COLLECTION | tee "$pkg_tree"
		umount $POOL_MNT/var/db/portsnap
		umount $POOL_MNT/usr/ports
		while read tree_node; do
			case $tree_node in
				[^/]*/*)
					push do $tree_node
				;;
				[^/]*)
					if canhas ${do-}; then
						sister nu_install_pkg -C $POOL_MNT -R -d $PKG_DBDIR $do && unset do
					fi
					if [ -f $POOL_MNT/etc/nuos/conf ]; then
						sed -i '' -e /^HOSTOS_PKG_COLLECTION=/d $POOL_MNT/etc/nuos/conf
					fi
					echo HOSTOS_PKG_COLLECTION=$tree_node >> $POOL_MNT/etc/nuos/conf
					case $tree_node in
						desktop)
							if ! [ -f "$NUOS_CODE/share/wallpapers/nuOS-default/contents/screenshot.png" ]; then
								user=`stat -f %Su "$NUOS_CODE/share/wallpapers/nuOS-default"`
								make -C "$NUOS_CODE/share/wallpapers/nuOS-default"
								chown -R $user "$NUOS_CODE/share/wallpapers/nuOS-default"
							fi
							mkdir -p $POOL_MNT/usr/local/share/wallpapers/nuOS-default
							cp -r "$NUOS_CODE/share/wallpapers/nuOS-default/contents" \
								"$NUOS_CODE/share/wallpapers/nuOS-default/metadata.json" \
								$POOL_MNT/usr/local/share/wallpapers/nuOS-default/
							mkdir -p $POOL_MNT/usr/share/skel/dot.config/plasma-workspace/env/
							cp "$NUOS_CODE/share/wallpapers/nuOS-default/set-nuOS-wallpaper.sh" \
								$POOL_MNT/usr/share/skel/dot.config/plasma-workspace/env/
							cp "$NUOS_CODE/share/wallpapers/nuOS-default/kscreenlockerrc" \
								$POOL_MNT/usr/share/skel/dot.config/
							
							cat > $POOL_MNT/usr/share/skel/dot.config/plasma-workspace/env/disable-ac-sleep.sh <<'EOF'
log=/tmp/nuOS-plasma-login.$$.disable_ac_sleep
mkdir $log || exit 1
(
	while [ ! -s .config/powermanagementprofilesrc ]; do sleep 5; done
	sleep 20
	kwriteconfig5 --file powermanagementprofilesrc --group AC --group DPMSControl --key idleTime 3600
	kwriteconfig5 --file powermanagementprofilesrc --group AC --group DimDisplay --key idleTime 600000
	kwriteconfig5 --file powermanagementprofilesrc --group AC --group SuspendSession --key suspendType 32
	sleep 5
	dbus-send --session --dest=org.freedesktop.PowerManagement --type=method_call --print-reply /org/kde/Solid/PowerManagement org.kde.Solid.PowerManagement.reparseConfiguration
	sleep 2
	dbus-send --session --dest=org.freedesktop.PowerManagement --type=method_call --print-reply /org/kde/Solid/PowerManagement org.kde.Solid.PowerManagement.refreshStatus
) 2> $log/err > $log/out &
[ x$i = x${i%disable-ac-sleep.sh} ] || rm $i
EOF
							
							sed -i '' -e '/^\[Seat:\*]/a\
user-session=plasma' $POOL_MNT/usr/local/etc/lightdm/lightdm.conf
							
							cat >> $POOL_MNT/usr/local/etc/lightdm/lightdm-gtk-greeter.conf <<'EOF'
[greeter]
screensaver-timeout=3600
theme-name = Breeze
icon-theme-name = breeze
font-name = Luxi Sans Bold 14
background = /usr/local/share/wallpapers/nuOS-default/contents/images/3840x2400.png
position = 20%,center 20%,center
EOF
							
							require_tmp dm_conf
							sed -ne '/^\[UserList]$/,/^\[/p' $POOL_MNT/usr/local/etc/lightdm/users.conf | grep -v '^#' >| "$dm_conf"
							hide_shells=`grep -e ^hidden-shells= "$dm_conf" | tail -n1 | cut -d= -f 2-`
							min_uid=`grep -e ^minimum-uid= "$dm_conf" | tail -n1 | cut -d= -f 2-`
							retire_tmp dm_conf
							
							(umask 77
								for u in $(awk -F: "\$3 > 0 && \$3 < $min_uid && \" $hide_shells \" !~ \" \"\$7\" \" {print \$1}" < $POOL_MNT/etc/passwd); do
									cat > $POOL_MNT/var/db/AccountsService/users/$u <<'EOF'
[User]
SystemAccount=true
EOF
								done
							)
						;;
					esac
					zfs snapshot -r $nuos_sysroot_ds@$tree_node
				;;
			esac
		done < "$pkg_tree"
		retire_tmp pkg_tree
		umount $POOL_MNT/tmp
	fi
	
	zfs create -o setuid=off -o exec=off -o mountpoint=/usr/ports/packages $nuos_bin_ds/pkg && zfs unmount $nuos_bin_ds/pkg || true
	
	freeze $nuos_sysroot_ds
fi

if ! srsly ${OPT_SKIP_FACTORY-}; then
	zfs create -o mountpoint=none -o canmount=off -o volmode=geom -o primarycache=metadata $POOL_NAME/swap \
		|| zfs set mountpoint=none canmount=off volmode=geom primarycache=metadata $POOL_NAME/swap

	sys_ds=$POOL_NAME/sys
	factories_ds=$sys_ds/factory
	nuos_factory_ds=$sys_ds/factory/nuOS-$NUOS_VER-$TRGT
	fbsd_factory_ds=$sys_ds/factory/$BASEOS_TYPE-$BASEOS_VER-$TRGT

	zfs create -p -o mountpoint=none -o canmount=off $sys_ds
	zfs create -p -o mountpoint=none -o canmount=off $factories_ds

	for factory_spec in \
		$nuos_factory_ds:$nuos_sysroot_ds@$PKG_COLLECTION \
		$fbsd_factory_ds:$fbsd_sysroot_ds@pkg_ready
	do
		factory_ds=${factory_spec%:*}
		sysroot_snap=${factory_spec#*:}
		
		zfs create -p -o mountpoint=none -o canmount=off $factory_ds

		factory_rev=0
		while
			new_factory_ds=$factory_ds/v$factory_rev
			zfs list $new_factory_ds
		do
			factory_rev=$(($factory_rev + 1))
		done

		sister nu_cloner -mp $POOL_NAME ${sysroot_snap#$POOL_NAME/} ${new_factory_ds#$POOL_NAME/}

		mkdir $POOL_MNT/boot/etc
		mv -n $POOL_MNT/etc/login.conf.db $POOL_MNT/boot/etc/
		ln -s ../boot/etc/login.conf.db $POOL_MNT/etc/login.conf.db
		zfs unmount $new_factory_ds/etc
		ln -s ../boot/etc/login.conf.db $POOL_MNT/etc/login.conf.db
		if [ -n "$ALT_MNT" ]; then
			mount -t zfs $new_factory_ds/etc "$ALT_MNT/etc"
			mount -t zfs $new_factory_ds/etc/local "$ALT_MNT/usr/local/etc"
		else
			zfs mount $new_factory_ds/etc
			zfs mount $new_factory_ds/etc/local
		fi

		zfs snapshot -r $new_factory_ds@prototype

		if [ -n "$ALT_MNT" ]; then
			zpool_cache=/boot/zfs/zpool.cache
		else
			zpool_cache="`zpool get -H -o value cachefile $POOL_NAME`"
			if [ "$zpool_cache" = none -o "x$zpool_cache" = x- ]; then
				unset zpool_cache
				require_tmp zpool_cache
				zpool set "cachefile=$zpool_cache" $POOL_NAME
			fi
		fi

		cp $zpool_cache $POOL_MNT/boot/zfs/zpool.cache

		zfs snapshot -r $new_factory_ds@pool_registered
		zfs set org.nuos:active_revision=v$factory_rev $factory_ds
	
		freeze $new_factory_ds
		
	done
fi


echo "Build of nuOS-$NUOS_VER based on $BASEOS_TYPE-$BASEOS_VER is complete${OPT_NOMAKE:+ (simulated)}, saved to pool $POOL_NAME."
