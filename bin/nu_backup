#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.99a0 - bin/nu_backup
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.99a0

while getopts Ef:l:np:sS:t:vZ OPT; do case $OPT in
	E) OPT_DECRYPT=y;;
	f) FROM_SNAP=$OPTARG;;
	l) SNAP_LABEL=$OPTARG;;
	n) OPT_BACKUP_NULL=y;;
	p) POOL_NAME=$OPTARG;;
	s) OPT_ONLY_SNAP=y;;
	S) SNAPSHOT=$OPTARG;;
	t) TOKEN=$OPTARG;;
	v) OPT_VERBOSE=y;;
	Z) OPT_DECOMPRESS=y;;
esac; done; shift $(($OPTIND-1))
[ $# -ge 1 -o -f /etc/nuos/backup ]

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_backup.sh"

nuos_init -q

: ${POOL_NAME:=$POOL_BOOT_NAME}

srsly ${OPT_DECRYPT-} || send_raw=y
srsly ${OPT_DECOMPRESS-} || send_compact=y

if srsly ${send_raw-} && srsly ${OPT_DECOMPRESS-}; then
	err 22 Cannot decompress encrypted data
fi

elim_dup_snaps () {
	local d= s= r= l= guid=
	xargs -L 1 | while read -r r; do
		l=${r##* }
		d=${l%%@*} s=${l#*@}
		[ "x$d" != "x$l" ] && [ "x$s" != "x$l" ] || return 1
		guid=`zfs get -H -p -o value guid "$d@$s"`
		if eval [ -z \"\${_elim_dup_snap_seen_$guid-}\" ]; then
			setvar _elim_dup_snap_seen_$guid y
			printf '%s\n' "$r"
		fi
	done
}

all_prior_snaps () {
	local d= s= r= f= o= p= n=
	xargs -n 1 | while read -r r; do
		d=${r%%@*} s=${r#*@}
		[ "x$d" != "x$r" ] && [ "x$s" != "x$r" ] || return 1
		zfs list -r -d 1 -t snapshot -H -p -s createtxg -o name "$d" \
			| sed -n -e "1,\\|^$d@$s\\>|p" \
			| {
				read -r f
				o=`zfs list -H -o origin ${f%@*}`
				if [ "x$o" = x- ]; then
					printf '%s\n' "$f"
				else
					printf '%s\n' "-i $o $f"
				fi
				while p=${n:-$f}; read -r n; do
					printf '%s\n' "-i @${p##*@} $n"
				done
			}
	done
}

all_descendant_snaps () {
	local d= s= r=
	xargs -n 1 | while read -r r; do
		d=${r%%@*} s=${r#*@}
		[ "x$d" != "x$r" ] && [ "x$s" != "x$r" ] || return 1
		zfs list -r -t snapshot -H -o name $d \
			| grep "@$s\$"
	done
}

all_origins () {
	local d= s= r= o=
	xargs -n 1 | while read -r r; do
		d=${r%%@*} s=${r#*@} o=
		[ "x$d" != "x$r" ] && [ "x$s" != "x$r" ] || return 1
		o=$d@$s
		while
			echo $o
			o=`zfs list -H -o origin ${o%@*}`
			[ x- != x$o ]
		do :;
		done
	done | tail -r
}

maybe_yell

[ -z "${FROM_SNAP-}" -o -z "${OPT_ONLY_SNAP-}" ]
[ -z "${FROM_SNAP-}" -o -z "${TOKEN-}" ]
[ -z "${SNAPSHOT-}" -o -z "${OPT_ONLY_SNAP-}" ]
[ -z "${SNAPSHOT-}" -o -z "${SNAP_LABEL-}" ]
[ -z "${TOKEN-}" -o -z "${SNAP_LABEL-}" ]

if canhas ${TOKEN-}; then
	canhas ${SNAPSHOT-}
	token_ds=`zfs send -Pvnet $TOKEN | sed -ne '/^[[:blank:]]*toname = /{s///;p;}'`
	canhas $token_ds
	token_pool=${token_ds%%/*}
	token_snap=${token_ds##*@}
	[ "$token_pool" = "$POOL_NAME" ] || error 9 "wrong pool, try using: -p $token_pool"
else
	if ! canhas ${SNAPSHOT-}; then
		new_snap=y
		SNAPSHOT=${SNAP_LABEL:+${SNAP_LABEL}-}t`date +%s`
	fi
fi

require_tmp input_list

if [ $# -ge 1 ]; then
	echo $@ | xargs -n 1 >| "$input_list"
else
	grep -Ev '^#|^$' < /etc/nuos/backup >| "$input_list"
fi

require_tmp output_list
while read ds; do
	case "$ds" in
		\?*)
			ds="${ds#\?}"
			optional=y;;
		*) optional=;;
	esac
	case "$ds" in
		@) ds=$POOL_NAME;;
		*) ds=$POOL_NAME/$ds;;
	esac
	while printf %s "$ds" | grep -q '('; do
		IFS=$'\t' read left var right <<EOF
`printf %s "$ds" | sed -E -e 's/^([^(]*)\(([^)]*)\)(.*)$/\1	\2	\3/'`
EOF
		val=`zfs get -H -p -o value $var ${left%/}`
		[ -n "$val" -a "$val" != - ]
		ds="$left$val$right"
	done
	if zfs list "$ds" > /dev/null 2> /dev/null; then
		printf '%s\n' "$ds"
	else
		[ -n "$optional" ] || { echo "FATAL: cannot open '$ds': dataset does not exist"; exit 1; }
	fi
done < "$input_list" >| "$output_list"
retire_tmp input_list

if srsly ${new_snap-}; then
	grep -v @ < "$output_list" | sed -e "s/\$/@$SNAPSHOT/" | xargs zfs snapshot -r
fi

if [ -z "${OPT_ONLY_SNAP-}" ]; then
	while IFS=@ read ds snap; do
		: ${snap:=$SNAPSHOT}
		printf '%s\n' "$ds@$snap" | if canhas "${FROM_SNAP-}"; then
			cat
		else
			all_origins | all_descendant_snaps | all_prior_snaps | elim_dup_snaps
		fi
	done < "$output_list" | while read -r args; do
		if ! srsly ${header_printed-}; then
			eko nu_backup.zstream_bundle${OPT_BACKUP_NULL:+_report} v0
			header_printed=y
		fi
		require_tmp custom_props
		ds=${args##* }
		ds=${ds%@*}
		while [ $POOL_NAME != $ds ]; do
			push dsps $ds
			ds=${ds%/*}
		done
		for ds in `eko $dsps | xargs -n1 | tail -r`; do
			zfs get -Ho name,property,value -slocal,received all $ds | awk -F $'\t' '$2 ~ /:/' | sed -e "s,^$POOL_NAME/,," >> "$custom_props"
		done
		unset dsps
		if ! srsly ${OPT_BACKUP_NULL-}; then
			eko nu_backup.zstream v0
			eko nu_backup.num_custom_props `wc -l "$custom_props" | xargs | cut -wf1`
			cat "$custom_props"
			eko nu_backup.zstream_begin v0
		fi
		retire_tmp custom_props
		if canhas ${TOKEN-}; then
			if [ $token_ds = ${args##* } ]; then
				${OPT_BACKUP_NULL:+echo} zfs send -e -t $TOKEN
				unset TOKEN
			fi
		else
			${OPT_BACKUP_NULL:+echo} zfs send -L -e ${send_compact:+-c} ${send_raw:+-w} -p ${FROM_SNAP:+-R -I @$FROM_SNAP} $args
		fi
	done
fi
retire_tmp output_list
