#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.999a0 - bin/nu_jail
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.999a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts a:b:C:dfh:H:i:I:j:mMo:p:P:qs:S:t:T:u:vwx OPT; do case $OPT in
	a) ADMIN_ACCT=$OPTARG;;
	b) BD_ACCT=$OPTARG;;
	C) CHROOTDIR=$OPTARG;;
	d) OPT_DELETE=y;;
	f) OPT_FORCE_DELETE=y;;
	h) JAIL_HOST=$OPTARG;;
	H) push SERVICES $OPTARG;;
	i) JAIL_IP=$OPTARG;;
	I) INTERFACE=$OPTARG;;
	j) JAIL_NAME=$OPTARG;;
	m) OPT_MOUNT_FSTAB=y;;
	M) OPT_SYSVIPC=y;;
	o) JAIL_OS=$OPTARG;;
	p) POOL_NAME=$OPTARG;;
	P) PUBLIC_INTERFACE=$OPTARG;;
	q) OPT_QUICK=y;;
	s) JAIL_SNAP=$OPTARG;;
	S) push PUBLIC_SERVICES $OPTARG;;
	t) JAIL_TYPE=$OPTARG;;
	T) push CONNECT_TARGETS $OPTARG;;
	u) USER_ACCT=$OPTARG;;
	v) OPT_VERBOSE=y;;
	w) OPT_RW_SRC=y;;
	x) ADMIN_ACCT=; BD_ACCT=; USER_ACCT=; ADMIN_PASS=; BD_PASS=; USER_PASS=;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

load_lib nu_admin nu_make nu_jail nu_collection

baseos_init
nuos_init
: ${POOL_NAME:=$POOL_BOOT_NAME}

collection_vars_init
make_vars_init
jail_vars_init
admin_init

maybe_pause
maybe_yell

jail_dir=`dirname "${CHROOTDIR-}$JAIL_PATH"`

add_our_jail_to_hostfile () {
	cat >> "$1" <<EOF
$JAIL_IP		$JAIL_HOST $JAIL_NAME.jail $JAIL_NAME
EOF
}

remove_our_jail_from_hostfile () {
	sed -i '' -E -e "/^[^#]*[[:<:]]$JAIL_NAME\\.jail[[:>:]]/d;/^[^#]*[[:<:]]$JAIL_NAME\\.guard[[:>:]]/d" "$1"
}

unmount_our_jail_pseudofs () {
	mount -pt devfs,fdescfs,tmpfs,procfs,linprocfs,linsysfs | awk "\$2 ~ \"^/var/jail/$JAIL_NAME/\"{print \$2}" | tail -r | xargs umount
}

if srsly "${OPT_DELETE-}"; then
	if ! srsly "${OPT_FORCE_DELETE-}"; then
		read -p "Are you sure you want to delete the jail '$JAIL_NAME' from configuration and all associated data from '$JAIL_DATA'? Type 'absolutely' to confirm: " confirm
		if [ "$confirm" != absolutely ]; then
			echo Action canceled.
			exit 85
		fi 
	fi
	if jls -j $JAIL_NAME_; then
		if grep -q "^[[:blank:]]*$JAIL_NAME_[[:blank:]]*{$" /etc/jail.conf /etc/jail.$JAIL_NAME_.conf /etc/jail.conf.d/$JAIL_NAME_.conf 2> /dev/null; then
			service jail onestop $JAIL_NAME > /dev/null 2>&1 &
			while jls -Ndj $JAIL_NAME_ > /dev/null; do
				sleep 1
			done
		else
			jail -r $JAIL_NAME_
			unmount_our_jail_pseudofs
		fi
	fi
	if [ -d "${CHROOTDIR-}/etc/jail.conf.d" ]; then
		rm "${CHROOTDIR-}/etc/jail.conf.d/$JAIL_NAME_.conf" || true
	else
		sed -i '' -e "/^$JAIL_NAME_ {\$/,/^}\$/d" "${CHROOTDIR-}/etc/jail.conf"
	fi
	remove_our_jail_from_hostfile "${CHROOTDIR-}/etc/hosts"
	for j in `ls "$jail_dir"`; do
		remove_our_jail_from_hostfile "$jail_dir/$j/etc/hosts" || true
	done
	
	[ ! -f "${CHROOTDIR-}/etc/fstab.$JAIL_NAME" ] || mv "${CHROOTDIR-}/etc/fstab.$JAIL_NAME" "${CHROOTDIR-}/etc/fstab.$JAIL_NAME.`env TZ=UTC date +%Y-%m-%d-%H%M%S`.removed_from_service"
	
	unmount_our_jail_pseudofs
	zfs list -H -r $JAIL_DATA | cut -w -f 1 | tail -r | xargs -n1 zfs destroy -f
	rmdir "${CHROOTDIR-}$JAIL_PATH"
	exit
fi

if [ -d "${CHROOTDIR-}/etc/jail.conf.d" ]; then
	dir_add=.d/$JAIL_NAME_.conf
	cp "${CHROOTDIR-}/etc/jail.conf.template" "${CHROOTDIR-}/etc/jail.conf$dir_add"
fi

zfs create -p -o mountpoint=none -o canmount=off $POOL_NAME/jail
mkdir -p "$jail_dir"


curr_host_ver=`zfs get -H -o value org.nuos:active_revision $POOL_NAME/os/$JAIL_OS || true`
[ "x$curr_host_ver" != x- ]

zfs list -H -r -t filesystem -o name,mountpoint $POOL_NAME/os/$JAIL_OS/$curr_host_ver | while read -r ds mp; do
	if canhas "${CHROOTDIR-}"; then
		mp=${mp#${CHROOTDIR-}}
	fi
	if [ $POOL_NAME/os/$JAIL_OS/$curr_host_ver$mp = $ds ]; then
		jmp=
	else
		if [ / = "$mp" ]; then
			jmp=$JAIL_PATH
		else
			jmp=$JAIL_PATH$mp
		fi
	fi
	pat=$POOL_NAME/os/$JAIL_OS/$curr_host_ver/
	if [ "$POOL_NAME/os/$JAIL_OS/$curr_host_ver" = "$ds" ]; then
		ds=
		jmp=$JAIL_PATH
	fi
	zfs clone ${jmp:+-o mountpoint=$jmp} $POOL_NAME/os/$JAIL_OS/$curr_host_ver${ds:+/${ds#$pat}}@$JAIL_SNAP $JAIL_DATA${ds:+/${ds#$pat}}
	if canhas "${CHROOTDIR-}" && { srsly "${remounted-}" || mkdir "$CHROOTDIR${jmp:-$JAIL_PATH$mp}" 2> /dev/null; }; then
		eval `stat -f "mode=%OMp%03OLp uid=%Du gid=%Dg flags=%Of" "${jmp:-$JAIL_PATH$mp}"`
		zfs unmount $JAIL_DATA${ds:+/${ds#$pat}}
		chown $uid:$gid "${CHROOTDIR-}$jmp"
		chmod $mode "${CHROOTDIR-}$jmp"
		chflags $flags "${CHROOTDIR-}$jmp"
		mount -t zfs $JAIL_DATA${ds:+/${ds#$pat}} "${CHROOTDIR-}${jmp:-$JAIL_PATH$mp}"
		remounted=y
	fi
done
if srsly "${remounted-}"; then
	find "$JAIL_PATH" | tail -r | xargs rmdir
fi


cat >> "${CHROOTDIR-}/$JAIL_PATH/etc/rc.conf.local" <<EOF
hostname="$JAIL_HOST"
EOF

sed -i '' -e "s/\.my\.domain\$/.`echo $JAIL_HOST | sed -e 's/^[^\.]*\.//'` $JAIL_HOST `echo $JAIL_HOST | sed -e 's/\..*//'`/" "${CHROOTDIR-}$JAIL_PATH/etc/hosts"

add_our_jail_to_hostfile "${CHROOTDIR-}/etc/hosts"
add_our_jail_to_hostfile "${CHROOTDIR-}$JAIL_PATH/etc/hosts" 
for j in `ls "$jail_dir"`; do
	if [ $j != $JAIL_NAME ]; then
		get_host_ent ${CHROOTDIR:+-C "$CHROOTDIR"} -f $j.jail >> "$jail_dir/$JAIL_NAME/etc/hosts" \
			&& add_our_jail_to_hostfile "$jail_dir/$j/etc/hosts" \
			|| echo "NOTICE: skipping jail $j on pool because it is unknown to the host system" >&2
	fi
done

cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
$JAIL_NAME_ {
EOF

if [ "$JAIL_NAME" != "$JAIL_NAME_" ]; then
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	path = "/var/jail/$JAIL_NAME";
	host.hostname = "$JAIL_NAME.jail";
EOF
fi

if [ -n "${OPT_MOUNT_FSTAB-}" ]; then
	touch "${CHROOTDIR-}/etc/fstab.$JAIL_NAME"
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	mount.fstab = "/etc/fstab.$JAIL_NAME";
EOF
fi

if [ -n "${OPT_SYSVIPC-}" ]; then
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	sysvmsg = "new";
	sysvsem = "new";
	sysvshm = "new";
EOF
fi

case $JAIL_TYPE in
	clone)
		cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<'EOF'
	allow.raw_sockets;
	noip_hostname;
	ip4 = "inherit";   
	$tmpfs_args = "";
EOF
		echo '	exec.prestart = "";' >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}"
		require_tmp tempfile
		grep -w ^exec.prestart "${CHROOTDIR-}/etc/jail.conf${dir_add:+.template}" | sed -e 's/\<dev && devfs .* applyset &&/dev \&\&/;s/^/	/' >> "$tempfile"
		cat "$tempfile" >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}"
		retire_tmp tempfile
		;;
	vnet)
		rip=${JAIL_IP%.*}.$((${JAIL_IP##*.} - 1))
		next_epair=$((`{ echo -1; sed -nEe '/^[[:blank:]]*exec.prestart[[:>:]]/{/"ifconfig epair[[:digit:]]+ create"/{s/^.*(epair[[:digit:]]+)/\1/;s/epair([[:digit:]]+).*$/\1/;p;};}' "${CHROOTDIR-}"/etc/jail.conf${dir_add:+.template "${CHROOTDIR-}"/etc/jail.conf.d/*.conf}; } | sort -n | tail -n 1` + 1))
		sed -i '' -e "\$i\\
$rip		$JAIL_NAME.guard.$HOSTNAME $JAIL_NAME.guard
		" "${CHROOTDIR-}/etc/hosts"
		cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	noip_hostname;
	vnet = "new";
	vnet.interface = "epair${next_epair}b";
	exec.prestart += "ifconfig epair${next_epair} create";
	exec.prestart += "ifconfig epair${next_epair}a $rip netmask 0xfffffffe";
	exec.start = "ifconfig lo0 127.0.0.1 netmask 0xff000000";
	exec.start += "ifconfig epair${next_epair}b $JAIL_IP netmask 0xfffffffe";
	exec.start += "route add default $rip";
	exec.start += "/bin/sh /etc/rc";
	exec.poststop += "ifconfig epair${next_epair}a destroy";
EOF
		;;
	*)
		cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	interface = "$INTERFACE";
EOF
		;;
esac

if srsly "${OPT_RW_SRC-}"; then
		cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	exec.prestart += "mkdir -p \$path/usr/ports && mount -t nullfs /usr/ports \$path/usr/ports";
	exec.prestart += "mount -t nullfs /usr/ports/distfiles \$path/usr/ports/distfiles";
	exec.prestart += "mount -t nullfs /usr/ports/packages \$path/usr/ports/packages";
	exec.prestart += "mount -t nullfs /var/db/portsnap \$path/var/db/portsnap";
	exec.prestart += "mount -t nullfs /usr/src \$path/usr/src";
	exec.prestart += "mount -t nullfs /usr/obj \$path/usr/obj";
	exec.poststop += "umount \$path/usr/ports/distfiles";
	exec.poststop += "umount \$path/usr/ports/packages";
	exec.poststop += "umount \$path/usr/ports";
	exec.poststop += "umount \$path/var/db/portsnap";
	exec.poststop += "umount \$path/usr/src";
	exec.poststop += "umount \$path/usr/obj";
EOF
fi

if canhas "${SERVICES-}${CONNECT_TARGETS-}"; then
	fw_rule_n=$((`{ eko 200; sed -nEe '/^[[:blank:]]*exec.poststart[[:>:]]/{/"[[:<:]]ipfw add 1[[:digit:]][[:digit:]] /{s/^.*[[:<:]]ipfw add (1[[:digit:]][[:digit:]]).*/\1/;p;};}' "${CHROOTDIR-}"/etc/jail.conf${dir_add:+.template "${CHROOTDIR-}"/etc/jail.conf.d/*.conf}; } | sort -n -u | head -n 1` - 1))
	while ipfw list $fw_rule_n; do
		[ $fw_rule_n -gt 50 ] || error 84 "too many existing jail services, contact support for guidance"
		fw_rule_n=$(($fw_rule_n - 1))
	done
fi

if canhas "${SERVICES-}"; then
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	exec.poststart += "ipfw add $fw_rule_n allow ip from $JAIL_NET to $JAIL_NAME.jail `eko $SERVICES | sed -e 's/ /, /g'` keep-state :$JAIL_NAME";
EOF
fi
if canhas "${CONNECT_TARGETS-}"; then
	for tgt in $CONNECT_TARGETS; do
		tp= sp=
		case `eko $tgt | tr -dc :` in
			::) sp=${tgt%%:*}; tgt=${tgt#$sp:} ;&
			:) tp=${tgt##*:}; tgt=${tgt%:$tp} ;;
		esac
		[ _$sp != _= ] || sp=$tp
		case $tgt in
			''|+|!@) tgt="not $JAIL_NET";;
			@) tgt=$JAIL_NET;;
			!*) tgt="not ${tgt#!}";;
			'*') tgt=any;;
		esac
		cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	exec.poststart += "ipfw add $fw_rule_n allow ip from $JAIL_IP${sp:+ $sp} to $tgt${tp:+ $tp} keep-state";
EOF
	done
fi
if canhas "${fw_rule_n-}"; then
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	exec.prestop += "ipfw delete $fw_rule_n || true";
EOF
fi

if canhas "${PUBLIC_SERVICES-}"; then
	warn '****************************************************'
	warn "* Setting up Public (-S)ervices on interface: $PUBLIC_INTERFACE *"
	warn '****************************************************'
	nat_conf=`
		echo $PUBLIC_SERVICES | xargs -n1 | while IFS=: read -r alias port int_port; do
			for proto in tcp udp; do
				echo redirect_port $proto $JAIL_NAME.jail:${int_port:-$port} $alias:$port
			done
		done | xargs`
	
	cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
	\$ip4_assignment = "$JAIL_IP";
	exec.poststart += "\`ipfw nat show config | grep -w \"config if $PUBLIC_INTERFACE\" | tail -n 1\` $nat_conf";
	exec.prestop += "\`ipfw nat show config | grep -w \"config if $PUBLIC_INTERFACE\" | sed -E -e \"s/ redirect_port [[:graph:]]+ \$ip4_assignment:[[:digit:]]+ [[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+:[[:digit:]]+//g\"\`";
EOF
fi

if [ $JAIL_TYPE = clone ]; then
	cat >> "${CHROOTDIR-}$JAIL_PATH/etc/rc.conf.local" <<EOF
syslogd_flags="-ss"
EOF
fi

admin_install "${CHROOTDIR-}$JAIL_PATH"

if [ -f "${CHROOTDIR-}/etc/resolv.conf" ]; then
	cp -a -v "${CHROOTDIR-}/etc/resolv.conf" "${CHROOTDIR-}$JAIL_PATH/etc/"
fi

cat >> "${CHROOTDIR-}/etc/jail.conf${dir_add-}" <<EOF
}
EOF


echo "Initialization of $JAIL_HOST running $JAIL_OS is complete."
