#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.999a0 - bin/nu_pkg_build_cluster
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.999a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

# while getopts aC:d:vw: OPT; do case $OPT in
# 	a) incr REBUILD_ALL 1;;
# 	C) CHROOTDIR=$OPTARG;;
# 	d) NU_PKG_DBDIR=$OPTARG;;
# 	v) OPT_VERBOSE=y;;
# 	w) WORKERS=$OPTARG;;
# esac; done; shift $(($OPTIND-1))

while getopts C:d:j:vw: OPT; do case $OPT in
	C) CHROOTDIR=$OPTARG;;
	d) NU_PKG_DBDIR=$OPTARG;;
#	j) BUILD_JAIL=$OPTARG;;
	v) OPT_VERBOSE=y;;
	w) push WORKERS $OPTARG;;
esac; done; shift $(($OPTIND-1))
[ $# = 0 ]

[ -z "${CHROOTDIR-}" ] || exit 43 CHROOTDIR is not an offered feature
. "$(dirname "$(realpath "$0")")/../lib/nu_make.sh"
. "$(dirname "$(realpath "$0")")/../lib/nu_ports.sh"

baseos_init
nuos_init
make_vars_init
maybe_yell
require_ports_tree

dpdy_stsfd () {
	for p in $ports; do
		underscore p
		sz=`stat -f %z "$data_graph/$p_/dependencies/all" 2>/dev/null || true`
		# echo $p $sz
		srsly $sz || echo $p
	done | grep -vx ports-mgmt/pkg
}

require_tmp db_pull
require_tmp -d data_graph
(
	cd "${CHROOTDIR-}$NU_PKG_DBDIR"
	find . '(' -depth 1 -and -type l ')' -or -path '*/dependencies' -or -path '*/dependants' -or -path '*/default_flavor' >| "$db_pull"
	tar -cf - -T "$db_pull" | tar -xf - -C "$data_graph"
)
retire_tmp db_pull
require_tmp build_order
sister nu_pkg_tree -i "${CHROOTDIR-}$NU_PKG_DBDIR" >| "$build_order"
while read -r p; do
	underscore p
	case $p in
		*/*)
			push ports $p
			push pkgs `cat "${CHROOTDIR-}$NU_PKG_DBDIR/$p_/name"`
		;;
		*) :;;
	esac
done < "$build_order"
require_tmp ready
dpdy_stsfd >| "$ready"
wc -l "$build_order" "$ready" | sed -e '$d'
rd="`cat "$ready" | xargs`"
while read -r p; do
	underscore p
	case $p in
		*/*)
			push rd $p
			push rdpn `cat "${CHROOTDIR-}$NU_PKG_DBDIR/$p_/name"`
		;;
		*) :;;
	esac
done < "$ready"
slts_n=0
for wrkr in ${WORKERS:=`ls /var/run/nuos_pkg | xargs`}; do
	w=`cat /var/run/nuos_pkg/$wrkr/wide`
	setvar WORKERS_$wrkr "$w"
	spill WORKERS_$wrkr
	i=0
	while [ $i -lt $w ]; do
		push slts $wrkr
		slts_n=$(( $slts_n + 1 ))
		i=$(($i+1))
	done
done
spill slts

ltrim () {
	eval local "v=\"\$$1\""
	until [ "$v" = "${v#[' '$'\t'$'\n']}" ]; do
		v="${v#?}"
	done
	setvar $1 "$v"
}

pull () {
	local n= h= t= i= r= e=
	case $1 in
		[0-9]*) n=$1; shift;;
	esac
	i=1
	until [ $i -gt ${n:=1} ]; do
		push r $1; shift
		i=$(($i+1))
	done
	eval t=\"\$$1\"
	[ $# = 1 ]
	set -- $r $1
	i=1
	e=1
	until [ $i -gt ${n:=1} ]; do
		h=${t%%[' '$'\t'$'\n']*}
		t=${t#$h}
		ltrim h
		ltrim t
		setvar $1 "$h"
		shift
		[ -z "$h" ] || e=0
		i=$(($i+1))
	done
	setvar $1 "$t"
	return $e
}

get_work () {
	while pull slt slts; do
		pull wp rd
		pull pn rdpn
		underscore wp
		mkdir -pv /var/run/nuos_pkgd/mbx/$slt/$wp_
		push bz_slts $slt $wp $pn
# 		push bzpn $pn
	done
}

rm -rf /var/run/nuos_pkgd/mbx || true
mkdir /var/run/nuos_pkgd/mbx
:>| /var/run/nuos_pkgd/shipd
while
	[ "${bz_slts-apples}" = "${still_bz_slts-oranges}" ] || get_work
	still_bz_slts=
	while pull 3 wrkr port pkg bz_slts; do
		#echo stat -f %z "/var/run/nuos_pkg/$wrkr/$pkg.pkg"
		sz=`stat -f %z "/var/run/nuos_pkg/$wrkr/$pkg.pkg" 2>/dev/null || true`
		if srsly $sz; then
			cp -a /var/run/nuos_pkg/$wrkr/$pkg.pkg /usr/ports/packages/All/.$pkg.pkg
			rm -v /var/run/nuos_pkg/$wrkr/$pkg.pkg
			mv -n /usr/ports/packages/All/.$pkg.pkg /usr/ports/packages/All/$pkg.pkg
			sister nu_install_pkg -BfFRSt ${NU_PKG_DBDIR+-d "${CHROOTDIR-}$NU_PKG_DBDIR"} ${PORT_DBDIR+-D "$PORT_DBDIR"} $port
			echo $pkg >> /var/run/nuos_pkgd/shipd
			push slts $wrkr
			underscore port
			if [ -L "$data_graph/$port_" ]; then
				clone=`readlink "$data_graph/$port_" | sed -e s+_+/+`
				port="$port $clone"
			fi
			for p in $port; do
				underscore p
				for consumer in `cat "$data_graph/$p_/dependants/all" 2>/dev/null || true`; do
					underscore consumer
					if [ -L "$data_graph/$consumer_" ]; then
						clone=`readlink "$data_graph/$consumer_" | sed -e s+_+/+`
						consumer="$consumer $clone"
					fi
					for c in $consumer; do
						underscore c
						grep -vx $p "$data_graph/$c_/dependencies/all" > "$data_graph/$c_/dependencies/all.new"
						mv "$data_graph/$c_/dependencies/all.new" "$data_graph/$c_/dependencies/all"
						if [ ! -s "$data_graph/$c_/dependencies/all" ]; then
							rd="$rd $c"; rdpn="$rdpn `cat "${CHROOTDIR-}$NU_PKG_DBDIR/$c_/name"`"
						fi
					done
				done
			done
			rmdir -v /var/run/nuos_pkgd/mbx/$wrkr/$port_
			rm -rf "$data_graph/$port_"
		else
			push still_bz_slts $wrkr $port $pkg
		fi
	done
	echo -n .
	canhas ${rd#$wp}
do
	if [ "$bz_slts" = "$still_bz_slts" ]; then
		sleep 1
	else
		bz_slts=$still_bz_slts
		get_work
	fi
done

# spill pkgs
spill slts_n slts
spill rd
# spill data_graph

eko Built packages described in $NU_PKG_DBDIR with ${err:=0} errors.
exit $err











# 0x0000DEADC0DE00000000DEADC0DE00000000DEADC0DE00000000DEADC0DE00000000DEADC0DE00000000DEADC0DE00000000DEADC0DE0000
: ${WORKERS:=3}

require_tmp -d data_graph
require_tmp -d workers
require_tmp -d logs

while incr i 0 $(($WORKERS-1)); do
	mkdir "$workers/$i:localhost"
done

(cd "${CHROOTDIR-}$NU_PKG_DBDIR" && tar -cf - */dependencies */dependants | tar -xf - -C "$data_graph")

getwork () {
	local _retvar=$1 _port= _idle=
	[ -n "`cd "$data_graph" && find . -depth 1 -name '*_*' | head -n 1`" ] || return 1
	while [ -z "$_port" ]; do
		_port=`cd "$data_graph" && find . -name dependencies -and -empty 2> /dev/null | sed -Ee 's:^./([^_]+)_(.*)/dependencies$:\1/\2:' | head -n 1`
		if [ -z "$_port" ]; then
			if [ -n "`find "$workers" -depth 2 -type d`" ]; then
				_idle=
			else
				if ! incr _idle 0 3; then
					echo "Starved for work. See errors in $logs." >&2
					ls -1 "$logs"/*.err >&2
					exit 1
				fi
			fi
			sleep 0.2
		fi
	done
	setvar $_retvar $_port
}

BOOT_BASEOS_TYPE=`uname -s`
BOOT_BASEOS_VER=`uname -r`
os_compat=$BOOT_BASEOS_TYPE-${BOOT_BASEOS_VER%%-*}

while getwork port; do
	port_=`echo $port | tr / _`
	worker=
	while [ -z "$worker" ]; do
		worker=`find "$workers" -depth 1 -empty | head -n 1`
		[ -n "$worker" ] || sleep 0.2
	done
	mv "$data_graph/$port_" "$worker/"
	(
		if canhas ${REBUILD_ALL-}; then
			name=`cat ${CHROOTDIR-}$NU_PKG_DBDIR/$port_/name`
			if [ ${REBUILD_ALL-} -ge 2 ] || \
				[ ! -L /usr/ports/packages/All/$name.txz ] || \
				! readlink /usr/ports/packages/All/$name.txz | grep -q ^../Index.nuOS/$os_compat-$TRGT_MACH/
			then
				lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" pkg delete -fy $name || true
				rm -v /usr/ports/packages/All/$name.txz || true
			fi
		fi
		sister nu_install_pkg -R $port > "$worker/$port_/out" 2>&1 &
		workpid=$!
		echo $workpid > "$worker/$port_/pid"
		err=0;
		wait $workpid || err=$?
		if [ $err = 0 ]; then
			mv "$worker/$port_/out" "$logs/$port_.out"
			for dependant in `cat "$worker/$port_/dependants/all" 2> /dev/null`; do
				dependant_=`echo $dependant | tr / _`
				lockf -kn "$data_graph/$dependant_/dependencies" sh -c "sed -i '' -e \\\\%^$port\\$%d \"$data_graph/$dependant_/dependencies/\"*; find \"$data_graph/$dependant_/dependencies\" -depth 1 -empty -delete"
			done
		else
			mv "$worker/$port_/out" "$logs/$port_.err"
		fi
		rm -r "$worker/$port_"
		cat -l <<EOF
`basename "$worker"`	$port
EOF
	) &
done
wait

errors=`ls $logs/*.err 2> /dev/null | wc -l | xargs`
echo
echo Built packages described in $NU_PKG_DBDIR with $errors errors.
if [ $errors -gt 0 ]; then
	ls -1 "$logs"/*.err >&2
fi

retire_tmp workers
retire_tmp data_graph
#retire_tmp logs

[ $errors = 0 ]
fi
# /end 0xDEADC0DE
