#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.999a0 - bin/nu_pkg_tree
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.999a0

. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts DfFi:kNo:OpPRSt:rxv OPT; do case $OPT in
	D) OPT_DEBUG=y;;
	f) OPT_FILENAME=y;;
	F) OPT_NOFLAVORS=y;;
	i) INPUT=$OPTARG;;
	k) OPT_KEEP=y;;
	N) incr OPT_NORMALIZE 1;;
	o) type=$OPTARG; eval file=\"\$$OPTIND\"; case $type in
		dot|xml|txt|tbl|dir)
			setvar out_$type "$file";;
		*) exit 22; esac; shift $OPTIND;;
	O) OPT_NOOPTIONS=y;;
	p) OPT_PKGNAME=y;;
	P) OPT_SERIAL=y;;
	R) OPT_NORECURSE=y;;
	S) OPT_NOSLAVE=y;;
	t) THREADS=$OPTARG;;
	r) OPT_RUNONLY=y;;
	x) OPT_INDEX=y;;
	v) OPT_VERBOSE=y;;
esac; done; shift $(($OPTIND-1))

: ${THREADS:=8}


load_lib nu_make nu_ports nu_collection

baseos_init -q
nuos_init -q
collection_vars_init -q

maybe_yell

if [ -n "${OPT_RUNONLY-}" ]; then
	recurse=use
else
	recurse=all
fi


walk () {
	# global work_dir dir recurse
	local node_=$1 \
		dep_=
	for dep_ in `cat "$dir/$node_/dependencies/collection" "$dir/$node_/dependencies/$recurse" 2> /dev/null | underscore`; do
		while [ -e "$metainfo_dir/$dep_.substitute" ]; do
			dep_=`cat "$metainfo_dir/$dep_.substitute" | underscore`
		done
		[ -e "$work_dir/$dep_" ] || walk $dep_
	done
	eko $node_
	touch "$work_dir/$node_"
	shift
	[ $# -eq 0 ] || walk $1
}

metainfo_dir="$(dirname "$(realpath "$0")")/../pkg"
require_tmp -d work_dir

if [ -n "${INPUT-}" ]; then
	if [ -e "$INPUT/root" ]; then
		dir="$INPUT"
		if [ $# -eq 0 ]; then
			start="`cat "$INPUT/root" | underscore`"
		else
			start="`eko $@ | underscore`"
		fi
	elif [ -e "$INPUT/name" ]; then
		dir="`dirname "$INPUT"`"
		start=`basename "$INPUT"`
	else
		exit 1
	fi
	! srsly ${OPT_FILENAME-} || pkg_suffix_init
	if srsly ${OPT_INDEX-}; then
		prepare_make_conf mc retire_mc_cmd
		if srsly ${OPT_FILENAME-}; then
			tag=`cat "$dir/tag"`
		fi
		walk $start | sed -e s+_+/+ | grep / | while read -r port; do
			underscore port
			idx=`port_idx "$mc" "$dir" $port`
			if srsly ${OPT_PKGNAME-} || srsly ${OPT_FILENAME-}; then
				name=`cat "$dir/$port_/name" 2> /dev/null`
				eko $name${OPT_FILENAME:+.$tag}.$idx${OPT_FILENAME:+.$PKG_SUFFIX}
			else
				eko $idx
			fi
		done
		$retire_mc_cmd mc
	elif srsly ${OPT_PKGNAME-} || srsly ${OPT_FILENAME-}; then
		walk $start | grep _ | while read -r node_; do
			eko `cat "$dir/$node_/name" 2> /dev/null`${OPT_FILENAME:+.$PKG_SUFFIX}
		done
	else
		walk $start | sed -e s+_+/+
	fi
	exit
fi

for type in dot xml txt tbl; do
	if eval [ -n \"\${out_$type-}\" ]; then
		eval [ ! -e \"\$out_$type\" -o ! -s \"\$out_$type\" ]
		require_tmp tmp_$type
	fi
done

if [ -n "${out_dir-}" ]; then
	while [ "$out_dir" != "${out_dir%/}" ]; do
		out_dir=${out_dir%/}
	done
	[ ! -e "$out_dir" -o -L "$out_dir" ] || ([ -d "$out_dir" ] && [ "`ls -a "$out_dir" | xargs`" = '. ..' ])
fi

mark_dependant () {
	# global work_dir
	local port=$1 action=$2 needs=$3 \
		needs_=
	underscore needs
	mkdir -p "$work_dir/$needs_/dependants"
	srsly ${OPT_SERIAL-} || until mkdir "$scratch_dir/$needs_.$action.lock" 2> /dev/null; do
		sleep 0.5
	done
	eko $port >> "$work_dir/$needs_/dependants/$action"
	srsly ${OPT_SERIAL-} || rmdir "$scratch_dir/$needs_.$action.lock"
}

main () {
	local depth=$((${depth--1}+1)) \
		arg= arg_= \
		port= port_= \
		collection= \
		makeargs= \
		flavor= \
		action= \
		dep= dep_= deps= \
		use_deps= all_deps= buildonly_deps=
		master= master_=
	
	[ $depth -gt 0 ] || eko $@ | xargs -n1 > "$work_dir/root"
	
	for arg in $@; do
		underscore arg
		while [ -e "$metainfo_dir/$arg_.substitute" ]; do
			arg=`cat "$metainfo_dir/$arg_.substitute"`
			underscore arg
		done
		mkdir "$scratch_dir/$arg_" 2> /dev/null || continue		
		mkdir -p "$work_dir/$arg_/dependencies"
		case $arg in
			[^/]*/*)
				echo -n '<'
				port=$arg
				underscore port
				
				[ -d "/usr/ports/${port%@*}" ]
				
				case $port in
					*@*) flavor=${port##*@};;
					*) flavor=
				esac
				underscore port
				unset makeargs
				if canhas ${flavor-}; then
					require_tmp makeargs
					cat "$metainfo_dir/${port_%@*}.makeargs" 2>/dev/null >| "$makeargs" || true
					cat "$metainfo_dir/$port_.makeargs" 2>/dev/null >> "$makeargs" || true
				else
					makeargs="$metainfo_dir/$port_.makeargs"
				fi
				
				cd "/usr/ports/${port%@*}"

				if ! srsly ${OPT_SERIAL-}; then
					until mkdir "$coord_dir/${port_%@*}" 2> /dev/null; do
						sleep 0.5
					done
				fi
				
				make __MAKE_CONF="$make_conf" PORT_DBDIR="$PORT_DBDIR" \
					${flavor:+FLAVOR=$flavor} \
					`cat "$makeargs" 2>/dev/null` \
					-D BATCH \
					-v 'PKGNAME:C/^.*://:S/^/n:/' \
					-v 'LIB_DEPENDS:S/:/%/:C/^.*%//:C/^./l:&/' \
					-v 'RUN_DEPENDS:S/:/%/:C/^.*%//:C/^./r:&/' \
					-v 'BUILD_DEPENDS:S/:/%/:C/^.*%//:C/^./b:&/' \
					-v 'FETCH_DEPENDS:S/:/%/:C/^.*%//:C/^./g:&/' \
					-v 'EXTRACT_DEPENDS:S/:/%/:C/^.*%//:C/^./x:&/' \
					-v 'PATCH_DEPENDS:S/:/%/:C/^.*%//:C/^./p:&/' \
					-v '${SLAVE_PORT:N[nN][oO]:C/.+/${MASTERDIR}/:tA:C+^/usr/ports/+m:+}' \
					${get_flavors:+-v 'FLAVOR:C/^./F:&/' -v 'FLAVORS:C/^./f:&/'} \
					${get_options:+-v '${COMPLETE_OPTIONS_LIST:D${COMPLETE_OPTIONS_LIST:C/^./o:&/} ${PORT_OPTIONS:M*:C/^./s:&/}}'} \
						| xargs -n 1 >| "$scratch_dir/$port_.port_data"
				
				if srsly ${get_options-}; then
					grep ^o: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.all_opts"
					if [ -s "$scratch_dir/$port_.all_opts" ]; then
						make __MAKE_CONF="$make_conf" PORT_DBDIR=/var/empty \
							${flavor:+FLAVOR=$flavor} \
							`cat "$makeargs" 2>/dev/null` \
							-D BATCH \
							showconfig \
								>| "$work_dir/$port_/options"
					fi
				fi
								
				if ! srsly ${OPT_SERIAL-}; then
					rmdir "$coord_dir/${port_%@*}"
				fi

				cd "$OLDPWD"
				
				srsly ${OPT_SERIAL-} || until mkdir \
						"$scratch_dir/$master_.name.lock" \
							2> /dev/null
				do
					sleep 0.5
				done
				grep ^n: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$work_dir/$port_/name"
				srsly ${OPT_SERIAL-} \
					|| rmdir "$scratch_dir/$master_.name.lock"
				if srsly ${get_options-}; then
					if [ -s "$scratch_dir/$port_.all_opts" ]; then
						grep ^s: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.my_opts"
					fi
				fi
				if srsly ${get_flavors-}; then
					grep ^F: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.flavor"
					grep ^f: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.flavors"
					head -n 1 "$scratch_dir/$port_.flavors" >| "$scratch_dir/$port_.default_flavor"
				fi
				grep ^l: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.lib_deps"
				grep ^r: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.run_deps"
				grep ^b: "$scratch_dir/$port_.port_data" | grep -v ':extract$' | cut -d : -f 2 >| "$scratch_dir/$port_.build_deps"
				grep ^b: "$scratch_dir/$port_.port_data" | grep ':extract$' | cut -d : -f 2 >| "$scratch_dir/$port_.extract_to_build_deps"
				grep ^g: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.fetch_deps"
				grep ^x: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.extract_deps"
				grep ^p: "$scratch_dir/$port_.port_data" | cut -d : -f 2 >| "$scratch_dir/$port_.patch_deps"
				if ! srsly "${OPT_NOSLAVE-}"; then
					master=`grep ^m: "$scratch_dir/$port_.port_data" | cut -d : -f 2`
					if canhas $master; then
						eko $master > "$work_dir/$port_/master"
					fi
				fi
								
				sets_union use_deps "$scratch_dir/$port_.lib_deps" "$scratch_dir/$port_.run_deps"
				mv "$use_deps" "$scratch_dir/$port_.use_deps"
				sets_union all_deps "$scratch_dir/$port_.use_deps" "$scratch_dir/$port_.build_deps" "$scratch_dir/$port_.fetch_deps" "$scratch_dir/$port_.extract_deps" "$scratch_dir/$port_.patch_deps"
				mv "$all_deps" "$scratch_dir/$port_.all_deps"
				sets_sym_diff buildonly_deps "$scratch_dir/$port_.all_deps" "$scratch_dir/$port_.use_deps"
				mv "$buildonly_deps" "$scratch_dir/$port_.buildonly_deps"

				for action in lib run build extract_to_build fetch extract patch all use buildonly; do
					if [ -s "$scratch_dir/$port_.${action}_deps" ]; then
						cat "$scratch_dir/$port_.${action}_deps" > "$work_dir/$port_/dependencies/$action"
						for dep in `cat "$scratch_dir/$port_.${action}_deps"`; do
							mark_dependant $port $action $dep
						done
					fi
				done
				if ! srsly ${OPT_NOSLAVE-}; then
					master=`grep ^m: "$scratch_dir/$port_.port_data" | cut -d : -f 2`
					if canhas $master; then
						underscore master
						if [ ! -e "$work_dir/$master_/name" ]; then
							mkdir -p "$work_dir/$master_"
							masters_makeargs="$metainfo_dir/$master_.makeargs"
							cd /usr/ports/$master
							srsly ${OPT_SERIAL-} || until mkdir \
								"$scratch_dir/$master_.name.lock" \
									2> /dev/null
							do
								sleep 0.5
							done
							make __MAKE_CONF="$make_conf" PORT_DBDIR="$PORT_DBDIR" \
								${flavor:+FLAVOR=$flavor} \
								`cat "$masters_makeargs" 2>/dev/null` \
								-v PKGNAME \
									>| "$work_dir/$master_/name"
							srsly ${OPT_SERIAL-} \
								|| rmdir "$scratch_dir/$master_.name.lock"
							cd "$OLDPWD"
						fi
						until srsly ${OPT_SERIAL-} || mkdir "$scratch_dir/$master_.slaves.lock" 2> /dev/null; do
							sleep 0.5
						done
						eko $port >> "$work_dir/$master_/slaves"
						srsly ${OPT_SERIAL-} || rmdir "$scratch_dir/$master_.slaves.lock"
					fi
				fi
				if srsly ${get_flavors-}; then
					if [ -s "$scratch_dir/$port_.flavors" ]; then
						cp "$scratch_dir/$port_.flavors" "$work_dir/$port_/flavors"
						cp "$scratch_dir/$port_.default_flavor" "$work_dir/$port_/default_flavor"
					fi
					if [ -s "$scratch_dir/$port_.flavor" ]; then
						if diff -q "$scratch_dir/$port_.flavor" "$scratch_dir/$port_.default_flavor" > /dev/null; then
							ln -s default_flavor "$work_dir/$port_/flavor"
						else
							cp "$scratch_dir/$port_.flavor" "$work_dir/$port_/flavor"
						fi
					fi
				fi
				if srsly ${get_options-}; then
					if [ -e "$scratch_dir/$port_.my_opts" ]; then
						{
							sed -nEe '/^[[:blank:]]+([^=]+)=off:.*$/{s//\1/;p;}' \
								"$work_dir/$port_/options" \
								> "$scratch_dir/$port_.def_opts_off"
							
							sed -nEe '/^[[:blank:]]+([^=]+)=on:.*$/{s//\1/;p;}' \
								"$work_dir/$port_/options" \
								> "$scratch_dir/$port_.def_opts_on"
							
							cat "$scratch_dir/$port_.my_opts" \
								"$scratch_dir/$port_.def_opts_off" \
								| sort | uniq -d | sed -e 's/$/=on/'
							
							cat "$scratch_dir/$port_.all_opts" \
								"$scratch_dir/$port_.my_opts" \
								| sort | uniq -u \
								> "$scratch_dir/$port_.off_opts"
							
							cat "$scratch_dir/$port_.off_opts" \
								"$scratch_dir/$port_.def_opts_on" \
								| sort | uniq -d | sed -e 's/$/=off/'
						} | sort > "$work_dir/$port_/settings"
						[ -s "$work_dir/$port_/settings" ] \
							|| rm "$work_dir/$port_/settings"
					fi
				fi

				if ! srsly ${OPT_NORECURSE-}; then
					deps=`cat "$scratch_dir/$port_.${recurse}_deps"`
				fi
				if canhas ${flavor-}; then
					retire_tmp makeargs
				fi
				echo -n '>'
			;;
			[^/]*)
				echo -n '['
				collection=$arg
				eval deps=\"\$COLL_$collection\"
				eko $deps | xargs -n 1 >> "$work_dir/$collection/dependencies/collection"
				for dep in $deps; do
					mark_dependant $collection collection $dep
				done
				echo -n ']'
			;;
			*) exit 22
		esac
	
		if ! srsly ${OPT_NORECURSE-}; then
			for dep in $deps; do
				underscore dep_
				if srsly ${OPT_SERIAL-}; then
					main $dep
				else
					until [ `ls "$coord_dir" | wc -l` -le $THREADS ]; do
						sleep 1
					done
					main $dep &
					sleep 0.0`jot -r 1 2 7`
				fi
			done
			srsly ${OPT_SERIAL-} || wait
		fi
		
		[ -z "${out_txt-}" ] || eko "`printf %${depth}s | tr ' ' '\t'`$arg" >> "$tmp_txt"
	done
}

require_ports_tree
prepare_make_conf make_conf retire_make_conf_cmd

srsly ${OPT_SERIAL-} || require_tmp -d coord_dir
srsly ${OPT_NOOPTIONS-} || get_options=y
srsly ${OPT_NOFLAVORS-} || get_flavors=y
require_tmp -d scratch_dir
ports_tag > "$work_dir/tag"

main ${@:-$PKG_COLLECTION}
if [ -n "${out_dir-}" ]; then
	if [ -L "$out_dir" ]; then
		rm "$out_dir"
	fi
	mkdir -p "$out_dir"
	if srsly ${OPT_NORMALIZE-}; then
		cd "$work_dir"
		d=`eko */depend*/*`
		[ "$d" != '*/depend*/*' ] || d=
		s=`eko */slaves`
		[ "$s" != '*/slaves' ] || s=
		for f in $d $s; do
			if [ "${f%/dependencies/collection}" != "$f" ]; then
				grep -v / $f | sort -u > $f.s
				grep v $f | sort -u >> $f.s
				continue
			fi
			sort -u -o $f.s $f
			mv $f.s $f
		done
		if [ 2 -le ${OPT_NORMALIZE-} ]; then
			for p in `ls | grep -v @`; do
				if [ -f $p/default_flavor ]; then
					f=`cat $p/default_flavor`
					if [ -d $p@$f ]; then
						c=`find $p $p@$f -type f | cut -d / -f 2- | sort -u`
						r=`printf '%s\n' "$c" | grep -v /`
						l=`printf '%s\n' "$c" | grep /`
						e=0
						for rf in $r; do
							if ! diff $p/$rf $p@$f/$rf; then
								echo "ERROR: $p/$rf != $p@$f/$rf" >&2
								e=$(($e + 1))
							fi
						done
						if [ $e -gt 0 ]; then
							exit 1
						else
							for lf in $l; do
								cat $p/$lf $p@$f/$lf 2>/dev/null | sort -u > $p@$f/$lf.new
								mv $p@$f/$lf.new $p@$f/$lf
							done
							rm -r $p
						fi
					else
						mv $p $p@$f
					fi
					ln -s $p@$f $p
				fi
			done
			for p in `find . -type d -depth 1 -name '*@*'`; do
				p=${p#./}
				f=${p#*@}
				p=${p%@*}
				d=`cat $p@$f/default_flavor`
				if [ $f = $d ]; then
					if [ -d $p -a ! -L $p ]; then
						if [ 'name slaves' = "`ls $p | sort | xargs`" ]; then
							if diff -q $p/name $p@$f/name; then
								{ cat $p/slaves $p@$f/slaves 2>/dev/null || true; } > $p@$f/slaves.new
								if [ -s $p@$f/slaves.new ]; then
									mv $p@$f/slaves.new $p@$f/slaves
								else
									echo "ERROR: ! -s $p/slaves" >&2
									exit 1
								fi
								rm -r $p
								ln -s $p@$f $p
							else
								echo "ERROR: $p/name != $p@$f/name" >&2
								exit 1
							fi
						else
							echo "ERROR: -d $p" >&2
							exit 1
						fi
					else
						if [ ! -L $p ]; then
							ln -s $p@$f $p
						fi
					fi
				fi
			done
		fi
		cd "$OLDPWD"
	fi
	cp -R "$work_dir"/* "$out_dir/"
fi
retire_tmp ${OPT_KEEP:+-k} work_dir
retire_tmp ${OPT_KEEP:+-k} scratch_dir
srsly ${OPT_SERIAL-} || rmdir $coord_dir || true
for type in dot xml txt tbl; do
	if eval [ -n \"\${out_$type-}\" ]; then
		eval cat \"\$tmp_$type\" '>|' \"\$out_$type\"
		retire_tmp tmp_$type
	fi
done

$retire_make_conf_cmd make_conf

eko
eko "Port dependency mapping complete."
