#!/bin/sh
set -e; set -u; set -C

# nuOS 0.0.12.999a0 - bin/nu_install_pkg
#
# Copyright (c) 2008-2024 Chad Jacob Milios and Crop Circle Systems.
# All rights reserved.
#
# This Source Code Form is subject to the terms of the Simplified BSD License.
# If a copy of the Simplified BSD License was not distributed alongside this file, you can
# obtain one at https://www.freebsd.org/copyright/freebsd-license.html . This software
# project is not affiliated with the FreeBSD Project.
#
# Official updates and community support available at https://nuos.org .
# Professional services available at https://ccsys.com .

NUOS_VER=0.0.12.999a0
. "$(dirname "$(realpath "$0")")/../lib/nu_system.sh"

while getopts ABC:d:D:fFgJ:l:MoRStuvw:W:yY OPT; do case $OPT in
	A) OPT_ARG_SUBPROCESS=y;;
	B) OPT_NOBUILD=y;;
	C) CHROOTDIR=$OPTARG;;
	d) NU_PKG_DBDIR=$OPTARG;;
	D) PORT_DBDIR=$OPTARG;;
	f) OPT_NOCLEAN_BEFORE=y;;
	F) OPT_NOCLEAN_AFTER=y;;
	g) OPT_FETCH=y;;
	J) MAKE_JOBS=$OPTARG;;
	l) LOG_TO=$OPTARG;;
	M) OPT_NOMAKE=y;;
	o) OPT_ORDER=y;;
	R) OPT_NORECURSE=y;;
	S) OPT_NOSCRIPT=y;;
	t) OPT_TAGPKG=y;;
	u) OPT_UPGRADE=y;;
	v) OPT_VERBOSE=y;;
	w) NUM_WORKERS=$OPTARG;; # slave listens port 12007, safe from takeover, unsafe from MitM/DOS; plan accordingly
	W) WHATS_THE_PASSWORD=$OPTARG;; # set this as well or else.... ^^^^^^^^ ...make it [0-9A-Za-z%@]{24,96}
	y) OPT_YES=y;;
	Y) OPT_YES_SUBPROCESS=y;;
esac; done; shift $(($OPTIND-1))

[ -z "${OPT_TAGPKG-}" ] || [ -z "${OPT_FETCH-}" ]
if [ -n "${OPT_YES-}" ]; then
	yes | sh $0 ${OPT_ARG_SUBPROCESS:+-A} ${OPT_NOBUILD:+-B} ${NU_PKG_DBDIR+-d "$NU_PKG_DBDIR"} ${PORT_DBDIR+-D "$PORT_DBDIR"} ${OPT_NOCLEAN_BEFORE:+-f} ${OPT_NOCLEAN_AFTER:+-F} ${OPT_FETCH:+-g} ${OPT_NOMAKE:+-M} ${OPT_NORECURSE:+-R} ${OPT_NOSCRIPT:+-S} ${OPT_TAGPKG:+-t} ${OPT_UPGRADE:+-u} ${OPT_VERBOSE:+-v} ${CHROOTDIR:+-C "$CHROOTDIR"} -Y $@
	exit $?
fi

load_lib nu_make nu_ports nu_collection nu_install

maybe_yell
baseos_init -q
nuos_init -q
make_vars_init
collection_vars_init -q


require_ports_tree
prepare_make_conf make_conf retire_make_conf_cmd

metainfo_dir="$(dirname "$(realpath "$0")")/../pkg"
if [ -z "${OPT_ARG_SUBPROCESS-}" -a -n "${CHROOTDIR-}" ]; then
	if [ ! -d "$CHROOTDIR/usr/ports/packages/All" ]; then
		mount -t nullfs /usr/ports/packages "$CHROOTDIR/usr/ports/packages"
		nullfs_mounted=y
	fi
	if mnt_dev "$CHROOTDIR"; then
		devfs_mounted=y
	fi
fi

BOOT_BASEOS_TYPE=`uname -s`
BOOT_BASEOS_VER=`uname -r`
os_compat=$BOOT_BASEOS_TYPE-${BOOT_BASEOS_VER%%-*}

canhas ${NUM_WORKERS-} || require_tmp deps
if canhas ${NU_PKG_DBDIR-} && [ -d "${CHROOTDIR-}${NU_PKG_DBDIR-}" ]; then
	db=$NU_PKG_DBDIR
	retire_db_cmd=:
	[ -d "${CHROOTDIR-}$db" ]
	[ $# -gt 0 ] || [ -f "${CHROOTDIR-}$db/root" ]
	if canhas ${OPT_NORECURSE-}; then
		echo $@ | xargs -n1
	else
		sister nu_pkg_tree -i "${CHROOTDIR-}$db" $@
	fi >| "${deps:-/dev/null}"
else
	require_tmp -d db
	retire_db_cmd=retire_tmp
	sister nu_pkg_tree ${OPT_ORDER:+-NN}${deps:+ -o txt "$deps"} ${OPT_VERBOSE:+-v} ${OPT_NORECURSE:+-R} -o dir "$db" $@
fi


make_way () {
	if [ -f "$metainfo_dir/$port_.displace" ] || [ -f "$metainfo_dir/${port_%@*}.displace" ]; then
		local dps=$(pkg ${CHROOTDIR:+-c $CHROOTDIR} info -qO `cat "$metainfo_dir/$port_.displace" "$metainfo_dir/${port_%@*}.displace" 2>/dev/null | sort -u`)
		if canhas ${dps-}; then
			lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" pkg ${CHROOTDIR:+-c $CHROOTDIR} delete -fy $dps
		fi
	fi
}

check_build_platform () {
	if [ -f "$metainfo_dir/$port_.wontbuildwith" ] || [ -f "$metainfo_dir/${port_%@*}.wontbuildwith" ]; then
		local twhps=$(pkg info -qO `cat "$metainfo_dir/$port_.wontbuildwith" "$metainfo_dir/${port_%@*}.wontbuildwith" 2>/dev/null | sort -u`)
		if canhas ${twhps-}; then
			require_tmp reinstall_after_build
			{
				eko $twhps | xargs -n1 pkg query '%n-%v %o@%At:%Av' | sed -ne '/@flavor:/{s//@/;p;}'
				pkg info -o $twhps
			} | sort -uk 1,1 >| "$reinstall_after_build"
			local p= o= o_=
			while read -r p o; do
				underscore o
				[ -f "$NU_PKG_DBDIR_DEFAULT/$o_/name" ] || error 2 'wouldnt know how to restore host platform'
				[ -f /usr/ports/packages/All/$p.${PKG_SUFFIX-} ] || error 2 'wouldnt be able to restore host platform'
			done < "$reinstall_after_build"
			lockf -k "/var/run/nu_install_pkg.pkgdb.lock" pkg delete -fy `cut -w -f 1 "$reinstall_after_build"`
		fi
	fi
}

restore_build_platform () {
	local rb=
	canhas "${reinstall_after_build-}" || return 0
	rb=`cut -w -f 2 "$reinstall_after_build" | grep -v -x -F -e $port`
	if canhas $rb; then
		sh $0 -B -d "$NU_PKG_DBDIR_DEFAULT" -f -F -M -R $rb
	fi
	retire_tmp reinstall_after_build
}

mktrgts='fetch checksum extract build stage package'

if canhas "${LOG_TO-}"; then
	mkdir -p "$LOG_TO"
	case "$LOG_TO" in
		/*) :;;
		*) LOG_TO=`realpath "$LOG_TO"`;;
	esac
	trgtabvs=`eko $mktrgts | tr -d aeiou`
	for mktrgt in $mktrgts; do
		setvar abv$mktrgt ${trgtabvs%% *}
		trgtabvs="${trgtabvs#* }"
	done
	if [ -d "$NUOS_CODE/.git" ]; then
		nuos_tag=g`env GIT_DIR="$NUOS_CODE/.git" git -C "$NUOS_CODE" rev-parse HEAD | head -c 12`
		require_tmp git_status
		env GIT_DIR="$NUOS_CODE/.git" git -C "$NUOS_CODE" status >| $git_status
	fi
fi

save_old_pkg () {
	mkdir -p "/usr/ports/packages/Index.nuOS/$os_compat-$TRGT.old"
	mv -v /usr/ports/packages/Index.nuOS/$os_compat-$TRGT/$old_pkg.*.*.$PKG_SUFFIX /usr/ports/packages/Index.nuOS/$os_compat-$TRGT.old/ || true
	if [ -L /usr/ports/packages/All/$old_pkg.$PKG_SUFFIX ]; then
		rm -v /usr/ports/packages/All/$old_pkg.$PKG_SUFFIX
	elif [ -f /usr/ports/packages/All/$old_pkg.$PKG_SUFFIX ]; then
		mkdir -p /usr/ports/packages/All.old
		mv -v /usr/ports/packages/All/$old_pkg.$PKG_SUFFIX /usr/ports/packages/All.old/
	fi
}

if canhas ${NUM_WORKERS-}; then
	: ${LISTEN_TCP_PORT:=12007}
	idle_wrkrs=$NUM_WORKERS
	for i in `jot $NUM_WORKERS`; do
		setvar wrk${i}_state idle
	done
	require_tmp nc_err
	
	require_tmp nc_json
	require_tmp nc_conn
	eko "NOTE: Listening on 0.0.0.0:$LISTEN_TCP_PORT..." >&2
	nc -4ndDNvl $LISTEN_TCP_PORT 2>| "$nc_err" | while read -r hello; do
		case "$hello" in
			nuOS-v0-${WHATS_THE_PASSWORD-newEnglandClamChowder})
				mv -f "$nc_err" "$nc_conn"
			;;
			*) error 13 'Our cluster slave port is under attack!';;
		esac
	done
	conn=`cat "$nc_conn"`
	case "$conn" in
		'Connection from '*' '?????' received!')
			callback=${conn#'Connection from '}
			callback=${callback%% *}
			callport=${conn%' received!'}
			callport=${callport##* }
			eko "INFO: Ring...ring... It's $callback:$callport..." >&2
		;;
		*) error 46 "Received a connection that made no sense. ($nc_conn)";;
	esac
	retire_tmp nc_conn
	eko "NOTE: Ring...ring... It's $callback:$callport..." >&2
	eko 'ports-mgmt/pkg' # We emit to stdout what we know to be prepared for pkg add (singleton), not make build (fleet)
	eko "INFO: Calling $callback:$callport..." >&2
	read -r assgnmnt <<EOF
`nc -4nN "$callback" "$callport"`
EOF
	case "$assgnmnt" in
		foo) :;;
		*) error 14 "FATAL: You can fuck right off with that there then.";;
	esac
else
	grep / "$deps"
fi | while read -r port; do
	underscore port
	while [ -f "$metainfo_dir/$port_.substitute" ]; do
		port=`cat "$metainfo_dir/$port_.substitute"`
		underscore port
	done
	uni=${port_%%@*}
	flavor=
	case $port in
		*@*)
			flavor=${port##*@}
		;;
	esac
	args="$metainfo_dir/$uni.args"
	if [ -z "${OPT_ARG_SUBPROCESS-}" ] && [ -f "$args" ]; then
		sh $0 ${OPT_NOBUILD:+-B} -d "$db" ${PORT_DBDIR+-D $PORT_DBDIR} ${OPT_NOCLEAN_BEFORE:+-f} ${OPT_NOCLEAN_AFTER:+-F} ${OPT_NOMAKE:+-M} ${OPT_NORECURSE:+-R} ${OPT_NOSCRIPT:+-S} ${OPT_TAGPKG:+-t} ${OPT_UPGRADE:+-u} ${OPT_VERBOSE:+-v} ${CHROOTDIR:+-C $CHROOTDIR} -A `cat "$args"` $port
	else
		script="$metainfo_dir/$uni.sh"
		pkg=`cat ${CHROOTDIR-}$db/$port_/name`
		env="$metainfo_dir/$uni.env"
		pkg_file=/usr/ports/packages/All/$pkg
		pkg_suffix_init
		if srsly "${OPT_TAGPKG-}${OPT_FETCH-}" || [ -z "${PKG_SUFFIX-}" -o ! -e $pkg_file.${PKG_SUFFIX-} ]; then
			noteworthy=y
			[ -z "${LOG_TO-}" ] || mkdir "$LOG_TO/$port_"
		else
			noteworthy=
		fi
		tag=`pkg_db_tag`
		if srsly $noteworthy; then
			[ -z "${OPT_NOMAKE-}" -o -n "${OPT_FETCH-}" ]
			destdir=
			unset makeargs
			if canhas ${flavor-}; then
				require_tmp makeargs
				cat "$metainfo_dir/$uni.makeargs" 2>/dev/null >| "$makeargs" || true
				cat "$metainfo_dir/$uni@$flavor.makeargs" 2>/dev/null >> "$makeargs" || true
			else
				makeargs="$metainfo_dir/$uni.makeargs"
			fi
			if [ -z "${OPT_NOSCRIPT-}" ] && [ -f "$script" ]; then
				pkg_step=pre-build
				. "$script"
			fi
			if srsly ${OPT_UPGRADE-}; then
				old_pkg=`pkg info -q -O $port`
			fi
			(
				cd /usr/ports/${port%%@*}
				if [ -f "$metainfo_dir/$uni.newflavor" ]; then
					def_flavors=$(env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS -VFLAVORS)
					new_flavor=`cat "$metainfo_dir/$uni.newflavor"`
				fi
				[ -n "${OPT_NOCLEAN_BEFORE-}" ] || make ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} -DNOCLEANDEPENDS clean
				if [ -z "${OPT_NOBUILD-}" ]; then
					if [ -f "${CHROOTDIR-}$db/$port_/dependencies/extract_to_build" ]; then
						for x2b in `cat "${CHROOTDIR-}$db/$port_/dependencies/extract_to_build"`; do
							(
								flavor=
								case $x2b in
									*@*)
										flavor=${x2b##*@}
									;;
								esac
								cd /usr/ports/${x2b%%@*}
								${LOG_TO:+time -lpo "$LOG_TO/$port_/time.x2b"} make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${flavor:+FLAVOR=$flavor} -DBATCH -DNO_DEPENDS extract
							)
						done
					fi
					check_build_platform
					for mktrgt in fetch checksum extract build stage package; do
						[ -z "${LOG_TO-}" ] || eval abv=\$abv$mktrgt
						${LOG_TO:+time -lpo "$LOG_TO/$port_/time.$abv"} env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS $mktrgt || error 89 "Failed $mktrgt target in port $port."
					done
					restore_build_platform
				elif srsly ${OPT_FETCH-}; then
					env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS fetch
				fi
				if canhas ${old_pkg-}; then
					lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS deinstall
					if [ $old_pkg = `cat "${CHROOTDIR-}$db/$port_/name"` ]; then
						save_old_pkg
					fi
				fi
				make_way
				if [ -z "${OPT_NOBUILD-}" ]; then
					lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" env `cat "$env" 2>/dev/null` make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} `cat "$makeargs" 2>/dev/null` -DBATCH -DNO_DEPENDS ${old_pkg:+re}install
					if [ -f "${CHROOTDIR-}$db/$port_/dependencies/extract_to_build" ]; then
						for x2b in `cat "${CHROOTDIR-}$db/$port_/dependencies/extract_to_build"`; do
							(
								flavor=
								case $x2b in
									*@*)
										flavor=${x2b##*@}
									;;
								esac
								cd /usr/ports/${x2b%%@*}
								if [ -z "`find work -type f -name '.*_done.*' | grep -E '^work/\.[[:alnum:]_]+_done\.' | grep -v '^work/\.extract_done\.'`"]; then
									make "__MAKE_CONF=$make_conf" PORT_DBDIR="$PORT_DBDIR" ${flavor:+FLAVOR=$flavor} -DBATCH -DNO_DEPENDS clean
								fi
							)
						done
					fi
				fi
				[ -n "${OPT_NOCLEAN_AFTER-}" ] || make ${new_flavor:+FLAVORS="$def_flavors $new_flavor"} ${flavor:+FLAVOR=$flavor} -DNOCLEANDEPENDS clean
			)
			[ -z "${OPT_FETCH-}" ] || continue
			if canhas ${flavor-}; then
				retire_tmp makeargs
			fi
			[ ports-mgmt/pkg != $port ] || pkg_suffix_init -i
			[ -f $pkg_file.$PKG_SUFFIX ]
			if [ -z "${OPT_NOSCRIPT-}" ] && [ -f "$script" ]; then
				pkg_step=post-build
				. "$script"
			fi
			if [ $tag = `ports_tag` ] && [ ! -L $pkg_file.$PKG_SUFFIX ]; then
				mkdir -p "/usr/ports/packages/Index.nuOS/$os_compat-$TRGT"
				if canhas ${old_pkg-} && [ $old_pkg != `cat "${CHROOTDIR-}$db/$port_/name"` ]; then
					save_old_pkg
				fi
				echo saving nuOS index:
				spill make_conf
				spill db
				spill port
				idx=`port_idx "$make_conf" "${CHROOTDIR-}$db" $port`
				mv -v $pkg_file.$PKG_SUFFIX "/usr/ports/packages/Index.nuOS/$os_compat-$TRGT/$pkg.$tag.$idx.$PKG_SUFFIX"
				ln -s "../Index.nuOS/$os_compat-$TRGT/$pkg.$tag.$idx.$PKG_SUFFIX" $pkg_file.$PKG_SUFFIX
			fi
		fi 2>&1 | if canhas ${noteworthy:+${LOG_TO-}}; then
			env > "${LOG_TO-}/$port_/env"
			{
				spill pkg tag os_compat TRGT NUOS_VER nuos_tag
				eko cptn=$HOST@$USER:$$
				eko '[ $I_DO_NOT_NEED_MY_TOES = cuzWutGudRth0SE ] || exit 88'
				shar `find ${git_status-} $make_conf $metainfo_dir/$uni.* ${flavor:+$metainfo_dir/$port_.*} $PORT_DBDIR/$uni` | tail -n +5
				uniq_tkn=`sister nu_randpw -b 36`
				eko "cat > $port_.`date +%s`.log <<'EOF-$uniq_tkn'"
				cat
				eko "EOF-$uniq_tkn"
			} | tee "${LOG_TO-}/$port_/log.sh"
		else cat
		fi
		if pkg info -e $pkg < /dev/null && ( [ -z "${CHROOTDIR-}" ] || pkg ${CHROOTDIR:+-c $CHROOTDIR} info -e $pkg < /dev/null ); then
			echo found dependency $pkg
		else
			[ -f $pkg_file.$PKG_SUFFIX ]
			make_way
			destdir="${CHROOTDIR-}"
			if [ -f "$script" ]; then
				pkg_step=pre-install
				. "$script"
			fi
			[ -z "${LOG_TO-}" ] || mkdir -p "$LOG_TO/.add/$port_"
			env `cat "$env" 2>/dev/null` pkg ${CHROOTDIR:+-c $CHROOTDIR} info -e $pkg || ${LOG_TO:+time -lpao "$LOG_TO/.add/$port_/time.$$@${HOST-ghost}.xzd"} xz --threads=0 --decompress --keep --force --stdout $pkg_file.$PKG_SUFFIX | lockf -k "${CHROOTDIR-}/var/run/nu_install_pkg.pkgdb.lock" ${LOG_TO:+time -lpao "$LOG_TO/.add/$port_/time.$$@${HOST-ghost}.add"} env `cat "$env" 2>/dev/null` pkg ${CHROOTDIR:+-c $CHROOTDIR} add -M -
			if [ -f "$script" ]; then
				pkg_step=post-install
				. "$script"
			fi
		fi
	fi
done
$retire_db_cmd db
canhas ${NUM_WORKERS-} || retire_tmp deps

if [ -n "${nullfs_mounted-}" ]; then
	umount "$CHROOTDIR/usr/ports/packages"
fi
if [ -n "${devfs_mounted-}" ]; then
	umount "$CHROOTDIR/dev"
fi

$retire_make_conf_cmd make_conf
